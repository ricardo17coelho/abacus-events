--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.8 (Debian 15.8-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.8 (Debian 15.8-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: EventTimelineCategory; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public."EventTimelineCategory" AS ENUM (
    'KIDS',
    'ADULTS',
    'FOOD',
    'BEVERAGE'
);


ALTER TYPE public."EventTimelineCategory" OWNER TO postgres;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: delete_claim(uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_claim(uid uuid, claim text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN 'error: access denied';
      ELSE
        update auth.users set raw_app_meta_data =
          raw_app_meta_data - claim where id = uid;
        return 'OK';
      END IF;
    END;
$$;


ALTER FUNCTION public.delete_claim(uid uuid, claim text) OWNER TO postgres;

--
-- Name: get_claim(uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_claim(uid uuid, claim text) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
    DECLARE retval jsonb;
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN '{"error":"access denied"}'::jsonb;
      ELSE
        select coalesce(raw_app_meta_data->claim, null) from auth.users into retval where id = uid::uuid;
        return retval;
      END IF;
    END;
$$;


ALTER FUNCTION public.get_claim(uid uuid, claim text) OWNER TO postgres;

--
-- Name: get_claims(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_claims(uid uuid) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
    DECLARE retval jsonb;
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN '{"error":"access denied"}'::jsonb;
      ELSE
        select raw_app_meta_data from auth.users into retval where id = uid::uuid;
        return retval;
      END IF;
    END;
$$;


ALTER FUNCTION public.get_claims(uid uuid) OWNER TO postgres;

--
-- Name: get_my_claim(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_my_claim(claim text) RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select
  	coalesce(nullif(current_setting('request.jwt.claims', true), '')::jsonb -> 'app_metadata' -> claim, null)
$$;


ALTER FUNCTION public.get_my_claim(claim text) OWNER TO postgres;

--
-- Name: get_my_claims(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_my_claims() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select
  	coalesce(nullif(current_setting('request.jwt.claims', true), '')::jsonb -> 'app_metadata', '{}'::jsonb)::jsonb
$$;


ALTER FUNCTION public.get_my_claims() OWNER TO postgres;

--
-- Name: is_claims_admin(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.is_claims_admin() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  BEGIN
    IF session_user = 'authenticator' THEN
      --------------------------------------------
      -- To disallow any authenticated app users
      -- from editing claims, delete the following
      -- block of code and replace it with:
      -- RETURN FALSE;
      --------------------------------------------
      IF extract(epoch from now()) > coalesce((current_setting('request.jwt.claims', true)::jsonb)->>'exp', '0')::numeric THEN
        return false; -- jwt expired
      END IF;
      If current_setting('request.jwt.claims', true)::jsonb->>'role' = 'service_role' THEN
        RETURN true; -- service role users have admin rights
      END IF;
      IF coalesce((current_setting('request.jwt.claims', true)::jsonb)->'app_metadata'->'claims_admin', 'false')::bool THEN
        return true; -- user has claims_admin set to true
      ELSE
        return false; -- user does NOT have claims_admin set to true
      END IF;
      --------------------------------------------
      -- End of block
      --------------------------------------------
    ELSE -- not a user session, probably being called from a trigger or something
      return true;
    END IF;
  END;
$$;


ALTER FUNCTION public.is_claims_admin() OWNER TO postgres;

--
-- Name: set_claim(uuid, text, jsonb); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_claim(uid uuid, claim text, value jsonb) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN 'error: access denied';
      ELSE
        update auth.users set raw_app_meta_data =
          raw_app_meta_data ||
            json_build_object(claim, value)::jsonb where id = uid;
        return 'OK';
      END IF;
    END;
$$;


ALTER FUNCTION public.set_claim(uid uuid, claim text, value jsonb) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: parking_lots; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.parking_lots (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    location text,
    total_slots smallint NOT NULL,
    filled_slots smallint,
    location_url text,
    name json DEFAULT '{}'::json
);


ALTER TABLE public.parking_lots OWNER TO postgres;

--
-- Name: program_timeline; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.program_timeline (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    locations text[],
    time_start text,
    time_end text,
    icon text,
    category public."EventTimelineCategory" NOT NULL,
    title json DEFAULT '{}'::json NOT NULL,
    note json DEFAULT '{}'::json
);


ALTER TABLE public.program_timeline OWNER TO postgres;

--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    id bigint NOT NULL,
    topic text NOT NULL,
    extension text NOT NULL,
    inserted_at timestamp(0) without time zone NOT NULL,
    updated_at timestamp(0) without time zone NOT NULL
);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: messages_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE SEQUENCE realtime.messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE realtime.messages_id_seq OWNER TO supabase_realtime_admin;

--
-- Name: messages_id_seq; Type: SEQUENCE OWNED BY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER SEQUENCE realtime.messages_id_seq OWNED BY realtime.messages.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: messages id; Type: DEFAULT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages ALTER COLUMN id SET DEFAULT nextval('realtime.messages_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	1b6e96a7-c9fd-4b8b-b2d7-c3dc0a6f8ae7	{"action":"user_confirmation_requested","actor_id":"2a674581-7888-4178-a4e5-b27e58c343d9","actor_username":"devel@rmorgado.ch","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-07-25 13:25:34.714963+00
00000000-0000-0000-0000-000000000000	fa5f5aca-28f2-43a7-a980-27b50d18ae34	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"devel@rmorgado.ch","user_id":"2a674581-7888-4178-a4e5-b27e58c343d9","user_phone":""}}	2024-07-25 13:27:06.711083+00
00000000-0000-0000-0000-000000000000	a155d0be-0bff-4d57-a4ba-415b30520397	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"deepkloud@gmail.com","user_id":"8771772d-85ab-4ac5-8536-025e17953b9f","user_phone":""}}	2024-07-25 13:48:01.372413+00
00000000-0000-0000-0000-000000000000	009240c6-e64f-4586-9d93-7f22a033fbf4	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 13:48:20.700315+00
00000000-0000-0000-0000-000000000000	067b34ed-c8cd-4d9d-a762-fdfe39f5b673	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-25 14:46:22.962409+00
00000000-0000-0000-0000-000000000000	94cc3ac6-bf9e-4b43-9f02-4759cb5594cf	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-25 14:46:22.963294+00
00000000-0000-0000-0000-000000000000	76bf54ac-2292-44ba-9bae-6c0149bad969	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 14:58:02.962804+00
00000000-0000-0000-0000-000000000000	829c4ab4-3b89-4f57-bcca-98cbc58ffe36	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:08:49.620878+00
00000000-0000-0000-0000-000000000000	813342e1-66ee-4e8c-b629-916a92cec865	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:11:36.239862+00
00000000-0000-0000-0000-000000000000	81f62077-2e15-4c22-a514-83e7359d81de	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:12:16.29228+00
00000000-0000-0000-0000-000000000000	a625316b-92cd-4513-aef4-b459e4e83f7d	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:12:19.368813+00
00000000-0000-0000-0000-000000000000	2d9c5d36-6f16-4a4f-96e8-b2b3c7ece248	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:12:32.704092+00
00000000-0000-0000-0000-000000000000	fab587cf-9fbf-4ec6-af4e-357d98cc6907	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:12:38.346479+00
00000000-0000-0000-0000-000000000000	a67be4cb-89ed-433c-8d4f-827916081615	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:13:04.62779+00
00000000-0000-0000-0000-000000000000	b8b8e9c9-08b6-4e33-8d67-9b236f90b3dd	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:13:05.738082+00
00000000-0000-0000-0000-000000000000	24dabf26-a1c0-445d-902d-d2cb6bf6d1cc	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:13:32.022649+00
00000000-0000-0000-0000-000000000000	ea364f29-b9fd-4eac-b76b-8302b824d5e6	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:13:36.061987+00
00000000-0000-0000-0000-000000000000	620ab4a8-676b-4650-956f-68f2a9f76f9f	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:13:59.809497+00
00000000-0000-0000-0000-000000000000	6e1a5b5e-479a-40fd-8ad6-bde3701ec213	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:14:01.085167+00
00000000-0000-0000-0000-000000000000	0d161a45-9903-4e40-842f-1c6622c3272b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:14:49.976446+00
00000000-0000-0000-0000-000000000000	38da4e18-d545-440b-a1a8-b964f3026050	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:14:51.013152+00
00000000-0000-0000-0000-000000000000	aae030d6-0918-4c2f-ac64-78ccbe5facfd	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:16:10.66607+00
00000000-0000-0000-0000-000000000000	6668e0e5-6852-46d5-9573-09c6953b8886	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:16:12.009306+00
00000000-0000-0000-0000-000000000000	f82da7ac-502d-4ad3-b034-b7456e31b027	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:16:40.214277+00
00000000-0000-0000-0000-000000000000	6e1723d3-dd4e-4ac5-9371-db52d6f41ce3	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:16:42.07389+00
00000000-0000-0000-0000-000000000000	97be2a19-c5c6-42af-aa86-f24c8ffecf9f	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-25 20:17:08.181183+00
00000000-0000-0000-0000-000000000000	b38fd9eb-8e09-437e-983d-ec2b3b045bbc	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-25 20:17:10.982813+00
00000000-0000-0000-0000-000000000000	ed9421ad-5706-4cfc-a97a-2880314260dd	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-26 14:00:19.552626+00
00000000-0000-0000-0000-000000000000	98a5ceac-fdd1-44d2-b3cf-04572c11aada	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-26 14:07:46.000549+00
00000000-0000-0000-0000-000000000000	38d478b2-4de1-4062-9a89-38f6f3fbfed4	{"action":"user_repeated_signup","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-07-26 14:07:55.897317+00
00000000-0000-0000-0000-000000000000	4b83477d-62a3-4605-838b-9a77ed65997a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-26 14:07:56.106378+00
00000000-0000-0000-0000-000000000000	00a17eb4-9de9-4c8a-a66b-f6d082642f0a	{"action":"user_confirmation_requested","actor_id":"f67dc119-2830-4365-b454-a8a531a5013b","actor_username":"sara.corradini@abacus.ch","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-07-26 15:11:12.817004+00
00000000-0000-0000-0000-000000000000	bedf0f0a-3074-4d36-ac44-8a95623dfcf0	{"action":"user_signedup","actor_id":"f67dc119-2830-4365-b454-a8a531a5013b","actor_username":"sara.corradini@abacus.ch","actor_via_sso":false,"log_type":"team"}	2024-07-26 15:17:16.626448+00
00000000-0000-0000-0000-000000000000	0394d1e2-dee2-4164-adf6-71dd94771fab	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-26 17:48:16.716731+00
00000000-0000-0000-0000-000000000000	784244ef-6d99-4880-b51d-aa352fe3f3dd	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-26 17:48:16.717617+00
00000000-0000-0000-0000-000000000000	fa1f328b-c0d8-4044-a870-07f61b0e10e6	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-26 18:55:07.216154+00
00000000-0000-0000-0000-000000000000	7a3d5a53-0bf4-4cdf-b65d-1fb064a82dad	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-26 18:55:07.21764+00
00000000-0000-0000-0000-000000000000	294762df-e135-4bc2-9404-6551522aedb8	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-26 20:52:00.392327+00
00000000-0000-0000-0000-000000000000	42ad89ef-2cc2-477b-8ca2-5f0e91d8bdf8	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-26 20:52:00.393769+00
00000000-0000-0000-0000-000000000000	f4ad282a-da3b-40e3-a3db-54da244997f3	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-27 08:19:28.940383+00
00000000-0000-0000-0000-000000000000	68a85104-f305-4fab-8eaa-a57118c52646	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-27 08:19:28.945903+00
00000000-0000-0000-0000-000000000000	e5b9d932-3287-456d-a17e-edd333507dd0	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-28 09:17:06.952515+00
00000000-0000-0000-0000-000000000000	8473acdc-5d68-4807-84bc-d6f7b746f077	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-28 09:17:06.957275+00
00000000-0000-0000-0000-000000000000	857570f9-e236-4628-ad62-b08ef6de33dc	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 08:27:57.144816+00
00000000-0000-0000-0000-000000000000	c2e0e0f5-9529-4f2e-ad3e-087c951551a5	{"action":"user_confirmation_requested","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-07-29 08:34:47.13098+00
00000000-0000-0000-0000-000000000000	6f4e4f3b-f4c8-49b9-b032-a528fdc80b66	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-29 09:45:27.116523+00
00000000-0000-0000-0000-000000000000	becd1847-faf6-4da3-9f83-0c9ffe31a804	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-29 09:45:27.118319+00
00000000-0000-0000-0000-000000000000	5f2b8824-d0ec-498b-8fcf-1229556ae259	{"action":"user_confirmation_requested","actor_id":"0a07c83a-2551-40b1-8c54-bfa3182e8eb8","actor_username":"sara.corradini+5@abacus.ch","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-07-29 10:49:28.305234+00
00000000-0000-0000-0000-000000000000	dd6b3123-7b15-49fa-860f-8855ab71905a	{"action":"user_confirmation_requested","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-07-29 11:51:43.514135+00
00000000-0000-0000-0000-000000000000	e274dbdc-ec38-4fa0-8470-6cd2c4e95bac	{"action":"user_signedup","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"team"}	2024-07-29 11:52:01.518428+00
00000000-0000-0000-0000-000000000000	fb717bdc-eed9-4816-87bd-7d8afcec0f3c	{"action":"user_signedup","actor_id":"0a07c83a-2551-40b1-8c54-bfa3182e8eb8","actor_username":"sara.corradini+5@abacus.ch","actor_via_sso":false,"log_type":"team"}	2024-07-29 11:52:11.492076+00
00000000-0000-0000-0000-000000000000	88da957b-6e15-4230-9865-8766c62be403	{"action":"user_signedup","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"team"}	2024-07-29 11:52:21.340313+00
00000000-0000-0000-0000-000000000000	90f9cf25-a32c-4aae-b8c6-8084e0b9da22	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-29 14:06:23.306233+00
00000000-0000-0000-0000-000000000000	b78cc0fa-f627-4fab-b868-39e4c0adaa82	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-29 14:06:23.308369+00
00000000-0000-0000-0000-000000000000	e46cd225-e79d-47a8-810a-6981e2fcf319	{"action":"user_confirmation_requested","actor_id":"1628825d-acbf-4c08-90da-0487da9e29a2","actor_username":"sara.corradini+2@abacus.ch","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-07-29 15:45:27.347488+00
00000000-0000-0000-0000-000000000000	6d530dad-1f2b-456b-93ba-b9ff1dc5f276	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-29 16:02:32.510094+00
00000000-0000-0000-0000-000000000000	e7c2494b-f3d4-4a1d-a605-281782654654	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-29 16:02:32.512008+00
00000000-0000-0000-0000-000000000000	2c4482d9-b41c-437a-a1c8-1b4ce6b1a2dc	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 16:02:40.151046+00
00000000-0000-0000-0000-000000000000	193c064e-1b8e-4d6d-afc2-edfa7e029cec	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-29 16:41:07.294551+00
00000000-0000-0000-0000-000000000000	738b1527-d86c-4dd2-9a98-ea2cd65ce7a6	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 16:42:11.699149+00
00000000-0000-0000-0000-000000000000	29a57fea-415c-4c0c-8e16-b2974ec632f0	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-29 16:42:21.008673+00
00000000-0000-0000-0000-000000000000	10eb06bc-6688-43fd-93e8-a0be4efca81e	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 16:43:52.632172+00
00000000-0000-0000-0000-000000000000	a8f00422-1821-4a06-b204-793df9417f97	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-29 16:43:54.210557+00
00000000-0000-0000-0000-000000000000	8f0d422b-62f9-426e-bc6c-e0e50939ce82	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 16:45:37.807344+00
00000000-0000-0000-0000-000000000000	115ffdda-f3b6-4e35-a32b-4a6d23b289c0	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-29 16:48:21.683948+00
00000000-0000-0000-0000-000000000000	d9281d49-4ab2-4a89-b352-1284a7e761b5	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 16:48:27.734859+00
00000000-0000-0000-0000-000000000000	fa68ce2a-850e-42f1-a0dc-660a8e021f89	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-29 16:48:29.163195+00
00000000-0000-0000-0000-000000000000	40fca4de-664b-4fc6-a45d-3362d9cc7fde	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 16:48:41.707527+00
00000000-0000-0000-0000-000000000000	724f6e12-778c-4482-bf48-0454ca4e3cb9	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-29 16:48:43.957981+00
00000000-0000-0000-0000-000000000000	3778620d-51b3-4edf-8747-2dc10ab53278	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 16:48:51.05333+00
00000000-0000-0000-0000-000000000000	5fd9c97b-a306-43d5-b70a-1f40ae5495b8	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-29 16:48:52.942276+00
00000000-0000-0000-0000-000000000000	7d0e7943-f236-4469-b406-50b7dd7d4b04	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-29 18:39:48.033245+00
00000000-0000-0000-0000-000000000000	b826ae20-1ed2-47b9-a4ae-6c51323602e1	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 06:45:55.808725+00
00000000-0000-0000-0000-000000000000	75be0a7b-5470-4c71-965d-4ad85e78f499	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 06:45:55.822247+00
00000000-0000-0000-0000-000000000000	48824773-ffd0-469a-ab5b-2a89e22b7122	{"action":"user_recovery_requested","actor_id":"f67dc119-2830-4365-b454-a8a531a5013b","actor_username":"sara.corradini@abacus.ch","actor_via_sso":false,"log_type":"user"}	2024-07-30 07:02:00.139278+00
00000000-0000-0000-0000-000000000000	09914ac6-2f8f-442d-8ab6-44cdafc5dc02	{"action":"login","actor_id":"f67dc119-2830-4365-b454-a8a531a5013b","actor_username":"sara.corradini@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-07-30 07:02:20.017258+00
00000000-0000-0000-0000-000000000000	573fe5d0-4e8c-4155-98a4-8b28e52c15bc	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"sara.corradini@abacus.ch","user_id":"f67dc119-2830-4365-b454-a8a531a5013b","user_phone":""}}	2024-07-30 07:09:40.792273+00
00000000-0000-0000-0000-000000000000	e17877c7-c0e1-40a6-90c7-1d11af266096	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 07:47:55.230213+00
00000000-0000-0000-0000-000000000000	e6c07f3d-09e0-431a-8c3d-aac470d6ab7f	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 07:47:55.231143+00
00000000-0000-0000-0000-000000000000	7f4fb8a5-dc35-494e-9b79-d76186844bea	{"action":"login","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 07:58:34.007545+00
00000000-0000-0000-0000-000000000000	00918643-840a-4175-abe7-d713ef146e0a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 08:01:56.396312+00
00000000-0000-0000-0000-000000000000	9eda7739-237c-47cd-be65-9cb572f00d24	{"action":"token_refreshed","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 09:19:11.381891+00
00000000-0000-0000-0000-000000000000	76428796-1f56-4f13-923d-b70ce7bca3bf	{"action":"token_revoked","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 09:19:11.382834+00
00000000-0000-0000-0000-000000000000	96bb6560-faa8-435a-83da-65669d2c9cd0	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 09:19:37.735215+00
00000000-0000-0000-0000-000000000000	7582631e-b104-41b9-bda1-a38741095d72	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-30 10:45:03.16213+00
00000000-0000-0000-0000-000000000000	f1a7d566-cd45-453b-8955-23bebc8a95a4	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-30 10:45:03.164359+00
00000000-0000-0000-0000-000000000000	5f6ab428-540e-4849-8a88-bdbfef6ea8c2	{"action":"token_refreshed","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 10:45:03.179259+00
00000000-0000-0000-0000-000000000000	d8dad152-2d5f-4b23-8b6f-951275e9e57c	{"action":"token_revoked","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 10:45:03.180219+00
00000000-0000-0000-0000-000000000000	1468cd9d-27a1-4959-be8f-4e7bb682518e	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-30 11:20:25.536426+00
00000000-0000-0000-0000-000000000000	26b836b4-1b58-4532-a226-3adad6becb36	{"action":"token_refreshed","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 11:53:10.760022+00
00000000-0000-0000-0000-000000000000	d0370f99-103b-4e37-95e3-a758750ff7a1	{"action":"token_revoked","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 11:53:10.761636+00
00000000-0000-0000-0000-000000000000	d22cd86d-a561-4f6e-860b-005b0fadbabe	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 12:38:47.221675+00
00000000-0000-0000-0000-000000000000	a5fb60df-b689-436d-beb7-3d59f3b5ef08	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 12:53:07.934915+00
00000000-0000-0000-0000-000000000000	c2e61574-e4bc-4c87-9082-f157410826ef	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-30 12:54:04.369134+00
00000000-0000-0000-0000-000000000000	0cc0ddb4-07b5-4ff1-a4cf-6f19b5e5b7df	{"action":"token_refreshed","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 12:54:23.274283+00
00000000-0000-0000-0000-000000000000	383556e9-d2cf-457e-b0d2-e605c4840d8f	{"action":"token_revoked","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 12:54:23.275414+00
00000000-0000-0000-0000-000000000000	031d76eb-1e43-4799-8640-19a68528809f	{"action":"token_refreshed","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 14:05:10.297256+00
00000000-0000-0000-0000-000000000000	cabb959b-c84f-435a-885d-54b3ec4e9cc1	{"action":"token_revoked","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 14:05:10.300373+00
00000000-0000-0000-0000-000000000000	c4080a41-5074-4210-ac15-63873afe521c	{"action":"token_refreshed","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 15:08:35.597746+00
00000000-0000-0000-0000-000000000000	4a65df4c-10d0-4bf3-9763-122cca79b2f7	{"action":"token_revoked","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 15:08:35.599224+00
00000000-0000-0000-0000-000000000000	669f9556-1ba6-433f-8b21-383c00c1f83b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:17:18.626825+00
00000000-0000-0000-0000-000000000000	b1577718-a7b7-4441-a546-ad6ec0d77ea1	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:18:04.325616+00
00000000-0000-0000-0000-000000000000	a9e2314e-33c5-49c8-aa02-ab6c1e6fae6c	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:24:19.281078+00
00000000-0000-0000-0000-000000000000	325f86f0-d958-4212-a99c-926beda9a689	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:26:28.96782+00
00000000-0000-0000-0000-000000000000	26c6371a-d1ad-4340-bc03-5bfc2812f6a9	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 18:33:13.133149+00
00000000-0000-0000-0000-000000000000	9aa5fe79-6b47-4be7-a8dd-9733d14a9e59	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-30 18:33:13.134727+00
00000000-0000-0000-0000-000000000000	fa090289-700d-49fe-8496-68dbdec32e1a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:34:45.82484+00
00000000-0000-0000-0000-000000000000	3d980b75-62e7-4fa3-b4bf-c002fa5977b6	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:36:51.719509+00
00000000-0000-0000-0000-000000000000	29d1c188-c482-457b-96d9-0a51b963aa1a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:48:28.646462+00
00000000-0000-0000-0000-000000000000	fb0dfbe9-d66a-4084-8b39-8fed5e43e599	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:52:28.629894+00
00000000-0000-0000-0000-000000000000	6cbf6be8-2076-4e65-97f7-6133f949e61e	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-30 18:57:36.58968+00
00000000-0000-0000-0000-000000000000	388cce2f-4c3a-4081-8e33-4d79dd66ab6a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 18:57:41.451845+00
00000000-0000-0000-0000-000000000000	584919c5-b5c7-4623-8e6a-2d20dd44cba0	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-30 19:57:32.346758+00
00000000-0000-0000-0000-000000000000	d86af940-4cbc-4866-8ac8-01f8c1451a05	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-30 19:57:32.349425+00
00000000-0000-0000-0000-000000000000	423f90ad-b837-4016-85cf-20071610c573	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-30 20:25:39.993628+00
00000000-0000-0000-0000-000000000000	4a7d9b2c-3a01-4b58-9ab0-9424223eb0e5	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 04:49:46.281824+00
00000000-0000-0000-0000-000000000000	411e5236-3dbd-4761-8ab1-bf302d59feb6	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 04:49:46.284099+00
00000000-0000-0000-0000-000000000000	cf937307-2977-4fc5-a5f4-9be2b58513a6	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-31 04:51:12.517505+00
00000000-0000-0000-0000-000000000000	f3c0da62-df48-40a2-ab68-4aee32bd5dfa	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 05:11:04.996036+00
00000000-0000-0000-0000-000000000000	8077405f-00ad-401b-882e-e1d4064b889d	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 05:11:04.998653+00
00000000-0000-0000-0000-000000000000	f806d01b-8896-4877-a311-0f45288a4d63	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 05:32:53.855044+00
00000000-0000-0000-0000-000000000000	5a92a6d7-4b91-4ad6-bf35-e83975d86571	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 05:32:53.857668+00
00000000-0000-0000-0000-000000000000	dee78029-8bb1-4cc1-960c-4bee30892f41	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 05:49:52.693954+00
00000000-0000-0000-0000-000000000000	e824337c-4944-4c22-a390-fd176f354d09	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 05:49:52.696196+00
00000000-0000-0000-0000-000000000000	e796a209-05b9-4c2b-947e-e130ef6f44f1	{"action":"token_refreshed","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 06:06:52.194868+00
00000000-0000-0000-0000-000000000000	0c90e0d4-1928-4791-bdbe-d183a510bd63	{"action":"token_revoked","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 06:06:52.197812+00
00000000-0000-0000-0000-000000000000	944495e6-cce2-4171-9bd6-01a8b733335d	{"action":"logout","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-07-31 06:06:54.831034+00
00000000-0000-0000-0000-000000000000	76ed6a85-8890-4e49-90f1-29596e8c0ddb	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-31 06:07:20.120504+00
00000000-0000-0000-0000-000000000000	e7c88cd3-a631-470c-bfa2-c99c0b1f084c	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 06:08:59.927553+00
00000000-0000-0000-0000-000000000000	95ee0a6f-5d0e-4a9d-91d9-02665f01e8ba	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 06:08:59.929765+00
00000000-0000-0000-0000-000000000000	c33b9a8c-f60c-4b83-ae50-7826d2b89fe2	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-31 06:10:05.265511+00
00000000-0000-0000-0000-000000000000	6a8857a7-a947-455e-b03b-52da53405b89	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 07:09:09.219237+00
00000000-0000-0000-0000-000000000000	9496b61e-75fc-4cb2-9601-6fc289282c31	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 07:09:09.225255+00
00000000-0000-0000-0000-000000000000	1379720f-e5ca-43e3-bde1-c0b8a9160aa1	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 07:16:39.53562+00
00000000-0000-0000-0000-000000000000	f1cb97fa-c7bb-43e9-a789-e30b0d3b7b1b	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-07-31 07:16:39.537524+00
00000000-0000-0000-0000-000000000000	3e9285cc-3dfb-42a1-ba29-9ed06878475d	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-31 07:24:34.667559+00
00000000-0000-0000-0000-000000000000	8f7a95e0-b796-4f5e-9811-d98709c6aff4	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-31 12:42:28.640015+00
00000000-0000-0000-0000-000000000000	1d1e9de8-834f-4b24-992c-4dae282f3e6a	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-07-31 13:15:37.105068+00
00000000-0000-0000-0000-000000000000	a8418d7f-1431-4e38-9de1-b4feeab79c6a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-07-31 14:57:31.310684+00
00000000-0000-0000-0000-000000000000	2096608e-11e9-43a9-bea9-c9543cf817aa	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 16:21:43.836457+00
00000000-0000-0000-0000-000000000000	33ae83c6-d9e1-4615-af49-0111066a2b80	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 16:21:43.842982+00
00000000-0000-0000-0000-000000000000	97b976d9-740f-4541-9ccf-3329da535ad3	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 20:19:30.673866+00
00000000-0000-0000-0000-000000000000	fa30ae59-7ca0-4666-b6e8-41f828212918	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-07-31 20:19:30.677509+00
00000000-0000-0000-0000-000000000000	fb309a34-c15e-427c-8648-909a17284eba	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 06:00:54.445125+00
00000000-0000-0000-0000-000000000000	5e426630-7bf4-4417-b534-21d6a2963cd5	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-05 06:17:45.110426+00
00000000-0000-0000-0000-000000000000	d0692f18-1cb0-4e63-acec-c9f5ae599e34	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 06:25:31.003522+00
00000000-0000-0000-0000-000000000000	c0d473ff-25b4-48f6-b59a-67524f40ea92	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 07:10:48.394311+00
00000000-0000-0000-0000-000000000000	2c1a1d91-d491-4932-a8c7-a3bed7aabc32	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-05 07:16:17.496794+00
00000000-0000-0000-0000-000000000000	b7fca0e3-95f9-409c-865c-b53c1ed4ac08	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 07:39:15.81401+00
00000000-0000-0000-0000-000000000000	3b1597fa-7561-490e-92b5-befda633430e	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-05 07:42:53.804995+00
00000000-0000-0000-0000-000000000000	03dfccde-2b35-4fa5-b6e4-0d5e5bb31ee1	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 07:52:24.972202+00
00000000-0000-0000-0000-000000000000	c782ffa2-4375-43b5-b67d-3885e0bf3dc5	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 08:04:04.974785+00
00000000-0000-0000-0000-000000000000	303441bd-df27-4da5-a9d8-d053434ddda0	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 08:29:36.329893+00
00000000-0000-0000-0000-000000000000	964d34c8-9eac-4e89-b932-a86c4c45873d	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-05 08:29:46.330733+00
00000000-0000-0000-0000-000000000000	ad4129fa-0427-4c37-9a02-91579e8a0c2b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 10:59:51.143842+00
00000000-0000-0000-0000-000000000000	dc8339fa-6ccb-4c2e-9bc4-e35de0ecee19	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-05 11:21:47.883299+00
00000000-0000-0000-0000-000000000000	cfd669a7-04d9-435b-807a-e66f27fda025	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 12:09:09.823862+00
00000000-0000-0000-0000-000000000000	8d37189c-c4b7-4905-a440-50493a287493	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-05 12:09:41.598983+00
00000000-0000-0000-0000-000000000000	0dbb458f-1c06-4775-9092-ed0c1bf44df5	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 13:20:10.177461+00
00000000-0000-0000-0000-000000000000	e07f620e-5e0d-464d-ab93-d4f74745e635	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-05 13:35:28.803758+00
00000000-0000-0000-0000-000000000000	f4d2a47b-d5cb-48aa-bae7-29cb5d76c007	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-05 13:36:00.351761+00
00000000-0000-0000-0000-000000000000	29a96add-d98e-4829-8d48-ff355957ba3b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 07:39:52.970864+00
00000000-0000-0000-0000-000000000000	74340874-3d20-4ae5-a55b-7963d6a60150	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 07:54:21.238921+00
00000000-0000-0000-0000-000000000000	5dd3e77f-85d8-44d6-9a20-03615271ff59	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 07:58:18.812778+00
00000000-0000-0000-0000-000000000000	3114dd81-2788-4f4b-ac20-e121f3087ee1	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 08:05:55.596017+00
00000000-0000-0000-0000-000000000000	e5e556a4-6131-4f5b-b0f1-c355f187795f	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 08:10:33.358049+00
00000000-0000-0000-0000-000000000000	c94dae49-c74b-4cdc-b2b7-be06f376309b	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 08:13:10.011243+00
00000000-0000-0000-0000-000000000000	962094b9-d8bd-4c2e-bb31-55e29ac65559	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 08:17:13.812491+00
00000000-0000-0000-0000-000000000000	7ae976e9-a34f-4868-b585-fe2b91791eec	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 08:20:33.363198+00
00000000-0000-0000-0000-000000000000	2b324a87-8bc2-4632-84b8-8b005274829b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 09:05:46.96682+00
00000000-0000-0000-0000-000000000000	b511562c-753e-4991-b4f6-1dcb25621372	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 10:38:08.038739+00
00000000-0000-0000-0000-000000000000	3df3d425-d87d-45a6-b36f-9273d0449287	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 10:42:33.42653+00
00000000-0000-0000-0000-000000000000	8d8594c9-53bd-4643-a882-a5b8e81f55df	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"sara.corradini@abacus.ch","user_id":"3ffbdd1b-f4b7-4ab4-9f6c-1150f414b4a0","user_phone":""}}	2024-08-06 10:43:36.731027+00
00000000-0000-0000-0000-000000000000	897e966b-5387-4bab-b55c-7e1c22c47e4b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 10:44:48.141985+00
00000000-0000-0000-0000-000000000000	99f50797-8c87-4398-9a12-59a17509f571	{"action":"login","actor_id":"3ffbdd1b-f4b7-4ab4-9f6c-1150f414b4a0","actor_username":"sara.corradini@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 10:45:32.1108+00
00000000-0000-0000-0000-000000000000	8004a553-7b39-462b-8b25-e2d822dbad31	{"action":"logout","actor_id":"3ffbdd1b-f4b7-4ab4-9f6c-1150f414b4a0","actor_username":"sara.corradini@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-08-06 10:45:40.900001+00
00000000-0000-0000-0000-000000000000	a199df5b-fe7d-4504-8a3a-dbeddf9776ec	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 12:11:34.709226+00
00000000-0000-0000-0000-000000000000	002b58e7-c412-489a-a152-bf480b58655e	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-06 13:15:38.545255+00
00000000-0000-0000-0000-000000000000	04c7a3d5-239c-4eb7-83d6-e0b2f115584d	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-06 13:15:38.547939+00
00000000-0000-0000-0000-000000000000	6ff53ae4-8d38-4935-9ad1-5d5cb951f498	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 13:37:39.02061+00
00000000-0000-0000-0000-000000000000	4c4cee59-9dca-4b50-9339-1784f4dc162f	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 13:39:56.565747+00
00000000-0000-0000-0000-000000000000	22c5afee-c2e0-4ed5-8e39-d01778601cc5	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 13:52:47.779961+00
00000000-0000-0000-0000-000000000000	f923eabf-8d25-4c17-a575-037753c3f5f0	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 13:52:55.915386+00
00000000-0000-0000-0000-000000000000	8f4b57ee-4c10-464e-8f35-4a71390a1496	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 13:53:47.604865+00
00000000-0000-0000-0000-000000000000	8b95011c-5726-4eb8-aefc-8a21ac03d919	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 14:34:13.256254+00
00000000-0000-0000-0000-000000000000	bd67980b-72cd-4361-965f-dac779ee3105	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 14:46:27.352434+00
00000000-0000-0000-0000-000000000000	7f35b72c-5efe-4938-9622-f12fb854c16e	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-06 14:46:49.894689+00
00000000-0000-0000-0000-000000000000	508411ea-da48-40c6-8bbf-5359c5d5914b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-06 17:02:51.620779+00
00000000-0000-0000-0000-000000000000	ecceaa23-8bbd-49f2-8822-798a367e3b09	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-06 18:06:04.248041+00
00000000-0000-0000-0000-000000000000	f9da8efa-58bd-4cf6-81a0-0baa26188072	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-06 18:06:04.257961+00
00000000-0000-0000-0000-000000000000	ab2dfc10-d93d-4e23-8ace-f5a0d9f73ebf	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-06 19:07:35.184099+00
00000000-0000-0000-0000-000000000000	49a17fb3-9274-4883-89be-48bad1706147	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-06 19:07:35.189878+00
00000000-0000-0000-0000-000000000000	0dae9020-ce4d-45e7-aedf-bcbe31b18fbd	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-07 05:37:49.729939+00
00000000-0000-0000-0000-000000000000	c981d84d-6be4-4d7a-8a38-b090a3eebb7e	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-07 05:37:49.736759+00
00000000-0000-0000-0000-000000000000	5ef328bf-edb7-47d7-85f6-c10b90c048f2	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 05:46:05.787819+00
00000000-0000-0000-0000-000000000000	b7c669b5-d217-401a-9dc6-c4e030e70c34	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 06:04:54.071416+00
00000000-0000-0000-0000-000000000000	db7ec994-84df-44cb-bf49-35412c50b8ba	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 06:41:26.296301+00
00000000-0000-0000-0000-000000000000	5c8a7000-ccf4-4b58-8ee1-3ae7f9d53e70	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 07:16:32.842432+00
00000000-0000-0000-0000-000000000000	33202e32-df93-448c-b4ff-1c64ce0bb9b6	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 07:17:17.362879+00
00000000-0000-0000-0000-000000000000	f64ed72a-b174-4215-8bc1-4ed14cbb1331	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-07 08:15:32.50597+00
00000000-0000-0000-0000-000000000000	30e844aa-a753-4baa-8408-7f13da094089	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-07 08:15:32.508294+00
00000000-0000-0000-0000-000000000000	b09df442-3a33-4510-abac-e3ab8877f2f1	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 08:45:11.864115+00
00000000-0000-0000-0000-000000000000	a6ce5f70-18f7-44f2-b406-6c8688674f08	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 08:58:55.470111+00
00000000-0000-0000-0000-000000000000	4cce767f-04ef-4c09-b823-a24875229d12	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 09:00:17.528219+00
00000000-0000-0000-0000-000000000000	f9dc4b53-4439-4037-a4e8-fb54969ef865	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 09:01:19.041179+00
00000000-0000-0000-0000-000000000000	0dba6428-e37d-4df0-848a-d20c3eeeab11	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 09:12:16.320485+00
00000000-0000-0000-0000-000000000000	4d303909-7194-4583-a7de-170d0c4dcc3d	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 09:13:28.584127+00
00000000-0000-0000-0000-000000000000	6dc62878-0ae9-4e54-834f-08fe12b2ec5a	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 09:36:11.704619+00
00000000-0000-0000-0000-000000000000	14903e3b-9361-4f93-af63-eabeef0bf0a5	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 10:47:17.083344+00
00000000-0000-0000-0000-000000000000	7c6821dd-bcf2-4c74-8286-5551829a3a41	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 10:49:08.188007+00
00000000-0000-0000-0000-000000000000	cbb0347e-2a83-4089-be7d-0eeb212b1bd2	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-07 11:19:15.922357+00
00000000-0000-0000-0000-000000000000	feb8b883-e2f1-446f-971a-2b87a67bc5f4	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-07 11:20:00.797451+00
00000000-0000-0000-0000-000000000000	861a32f2-32c4-447f-b844-43549610f7cc	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 04:58:28.029927+00
00000000-0000-0000-0000-000000000000	8c25bd0a-4bba-46e0-bfbd-25669a6038a4	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-08 05:00:13.271084+00
00000000-0000-0000-0000-000000000000	2ba741ff-afb9-43fd-8642-108641bd9cfe	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 05:50:37.377255+00
00000000-0000-0000-0000-000000000000	9b411a35-ab05-4a02-9f04-6b8dd1dc05fc	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-08 06:04:19.871072+00
00000000-0000-0000-0000-000000000000	886ed7f3-bde8-4c3b-8ecc-2e73c08eca7a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 06:04:26.555463+00
00000000-0000-0000-0000-000000000000	e8197186-5015-454f-9d20-8a721eaefb86	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-08 06:07:04.18441+00
00000000-0000-0000-0000-000000000000	a8fe2dee-b8d0-4604-8838-05f6c70f7e0c	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 06:07:58.665206+00
00000000-0000-0000-0000-000000000000	848c9c4d-523a-41fc-b5c4-baee7eea2016	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-08 06:10:06.282236+00
00000000-0000-0000-0000-000000000000	16983b0f-24ef-4dc0-9baf-a934525f3dbd	{"action":"login","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 10:49:14.34034+00
00000000-0000-0000-0000-000000000000	402787cf-9299-4a6f-adec-b2ac25445b5e	{"action":"logout","actor_id":"11c8b85e-1552-4567-85aa-44675329b390","actor_username":"sara.corradini+4@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-08-08 10:49:32.816167+00
00000000-0000-0000-0000-000000000000	d326471e-a94d-4293-a61b-62a13ff5215b	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 10:49:45.67223+00
00000000-0000-0000-0000-000000000000	ee965d06-c4ac-4695-8d4c-0a31d57493da	{"action":"logout","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-08-08 10:50:00.258783+00
00000000-0000-0000-0000-000000000000	8ded73bc-d43d-4161-ba5b-78a33094398c	{"action":"login","actor_id":"0a07c83a-2551-40b1-8c54-bfa3182e8eb8","actor_username":"sara.corradini+5@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 10:50:14.198265+00
00000000-0000-0000-0000-000000000000	d5b4474d-ce3e-4135-9df2-da767d62066a	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-08 10:54:32.139504+00
00000000-0000-0000-0000-000000000000	630f5854-d74f-405c-b655-66424ff17e41	{"action":"logout","actor_id":"0a07c83a-2551-40b1-8c54-bfa3182e8eb8","actor_username":"sara.corradini+5@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-08-08 10:57:18.20724+00
00000000-0000-0000-0000-000000000000	ae582ab5-b542-4144-ad37-7c5d4c6bd924	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-09 08:45:14.012392+00
00000000-0000-0000-0000-000000000000	8e4e20a9-9c23-4680-8024-2dae99925d34	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-09 08:48:31.166951+00
00000000-0000-0000-0000-000000000000	b7f3c0ff-d0cc-4ace-a1b3-994cf575ab5a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-12 08:00:33.061136+00
00000000-0000-0000-0000-000000000000	739e3d30-aaa3-46cd-b067-ca6e8528d0d3	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-12 08:01:36.352529+00
00000000-0000-0000-0000-000000000000	3f3588cd-096a-48bd-9c29-d02f08b2a20a	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-12 09:19:26.935005+00
00000000-0000-0000-0000-000000000000	2c3a0928-a698-4229-9b0c-96db78b5bdaf	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-12 09:20:29.876859+00
00000000-0000-0000-0000-000000000000	8d7ec9e3-881b-4c14-af93-a002f38575c6	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-13 04:56:06.3144+00
00000000-0000-0000-0000-000000000000	101df803-8f79-42fd-b746-79143de69956	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-13 04:56:18.225247+00
00000000-0000-0000-0000-000000000000	0a3d3b52-0420-4a4a-92e7-ecff9f016be3	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-13 07:04:32.260762+00
00000000-0000-0000-0000-000000000000	649e5292-c818-48b1-8afe-466d7228c5f6	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-13 07:04:49.6659+00
00000000-0000-0000-0000-000000000000	30952806-40a1-439c-96c7-6320447e88b6	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-13 08:06:39.036409+00
00000000-0000-0000-0000-000000000000	34000713-6557-40e6-8e6b-b99d66f15564	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 05:04:32.694235+00
00000000-0000-0000-0000-000000000000	37f24233-a8ef-4048-a6e4-da11ba9dc4f5	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 05:14:40.926641+00
00000000-0000-0000-0000-000000000000	56255eeb-b085-41e4-887f-f7dc35184ed4	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 07:05:31.794909+00
00000000-0000-0000-0000-000000000000	d43f17fc-c0f7-4a02-877d-80edc1f0471c	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 07:15:32.261112+00
00000000-0000-0000-0000-000000000000	b08cdd84-1034-4853-ad39-d79c220012a7	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 07:16:09.328654+00
00000000-0000-0000-0000-000000000000	0f763865-021c-427b-bd92-ed3deac38d79	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 07:21:43.175006+00
00000000-0000-0000-0000-000000000000	4ce06512-5526-4302-a09d-d88a5bc29d4c	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 07:24:11.926681+00
00000000-0000-0000-0000-000000000000	3ff0643a-e39a-43ba-8928-1ae0a36de491	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-15 08:58:53.256024+00
00000000-0000-0000-0000-000000000000	61cffdf6-2607-4e4b-b3dd-247a5a9feee0	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-15 08:58:53.258842+00
00000000-0000-0000-0000-000000000000	849eb447-ae23-4eff-9ee9-76dbc6176729	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-15 10:12:36.329156+00
00000000-0000-0000-0000-000000000000	69d13a40-6f8a-4ed0-a940-7aec00b5732e	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-15 10:12:36.332324+00
00000000-0000-0000-0000-000000000000	ce2c1e6a-035a-47f9-bdc4-79e348cadd8e	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 10:56:06.576436+00
00000000-0000-0000-0000-000000000000	3694a81f-9101-492f-ae95-cae560869416	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 10:56:53.543416+00
00000000-0000-0000-0000-000000000000	ffdc30dd-a9cf-47fe-91ef-f0a9626983f4	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 11:47:57.949603+00
00000000-0000-0000-0000-000000000000	e0e6c859-9d94-4024-bb38-769f1a2d9ea7	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 12:11:02.140794+00
00000000-0000-0000-0000-000000000000	ea2f7af2-5e15-46d9-b12f-79f3b42f16df	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 12:11:23.902002+00
00000000-0000-0000-0000-000000000000	55e4dd21-4c51-4fe3-8711-0ce839a8ba91	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 12:14:30.625455+00
00000000-0000-0000-0000-000000000000	7837be6e-12d4-4d78-8e1f-404e51cee3af	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 12:17:56.703453+00
00000000-0000-0000-0000-000000000000	c9d0db54-38c4-4569-9072-6799fdd602e7	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 12:19:02.972222+00
00000000-0000-0000-0000-000000000000	7d8df288-fc84-4db0-9649-9d9c4888d6b6	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 12:21:33.271186+00
00000000-0000-0000-0000-000000000000	7ea42345-b17a-49e5-9d16-39d5ab990924	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 12:47:30.075308+00
00000000-0000-0000-0000-000000000000	70a25085-9d58-4adf-af96-8fa00232677c	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-15 13:12:51.563455+00
00000000-0000-0000-0000-000000000000	2406dc7a-2580-46c0-b7ea-c55fc06c3069	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-15 13:14:15.404929+00
00000000-0000-0000-0000-000000000000	ca5fcb53-e444-44eb-bcb0-02e087d1b64e	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-16 06:53:24.290334+00
00000000-0000-0000-0000-000000000000	aec92c95-bf3c-4f84-88b2-0931f13c2d41	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-16 07:02:02.470236+00
00000000-0000-0000-0000-000000000000	c80cc2da-dded-4f41-abf8-4fc479915567	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-16 07:13:51.078828+00
00000000-0000-0000-0000-000000000000	cc32c5c3-df00-43d9-b0f2-c266b032d46a	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-16 07:14:44.412313+00
00000000-0000-0000-0000-000000000000	d6cb2e5d-7f61-442f-b7b6-f2376a69e148	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-16 07:17:23.74165+00
00000000-0000-0000-0000-000000000000	2fb0b2b7-3cd4-4f0e-a462-1d978cfe36eb	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-16 07:17:48.286415+00
00000000-0000-0000-0000-000000000000	44d1157f-98c1-47aa-a536-da576a14956e	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-16 07:18:58.416172+00
00000000-0000-0000-0000-000000000000	0411492c-3bb1-4bb4-8a70-d714ba0a9210	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-16 07:22:24.036527+00
00000000-0000-0000-0000-000000000000	b0553650-c65f-407d-b840-f0267912d219	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-16 12:32:34.507773+00
00000000-0000-0000-0000-000000000000	4334f8ac-84d8-45d9-aa9c-36b6e8c6a2b3	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-16 13:36:54.799513+00
00000000-0000-0000-0000-000000000000	6dcb601f-b6f3-46ec-bb84-2547b88f1a63	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-16 13:36:54.808012+00
00000000-0000-0000-0000-000000000000	88cce9ea-f902-4ebc-9f86-aa4376abc621	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-16 13:38:22.2291+00
00000000-0000-0000-0000-000000000000	b1de81fe-d4fa-4dc2-b13c-288d5d23953c	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-16 13:42:15.547568+00
00000000-0000-0000-0000-000000000000	8d6d8087-3f43-4a1e-b107-bd502d93025b	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-16 13:46:17.844181+00
00000000-0000-0000-0000-000000000000	5217a2b1-191c-4b75-ba6c-767ef016877f	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-16 13:58:57.513569+00
00000000-0000-0000-0000-000000000000	94af32ca-816c-4ef6-912d-7aefbc5ecfd0	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-18 07:43:24.801772+00
00000000-0000-0000-0000-000000000000	0dcec605-4f78-4783-be0d-0660ba4a54ea	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-18 10:26:07.644154+00
00000000-0000-0000-0000-000000000000	b18fb3d1-9489-4e9c-8c87-5d174a6000b2	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-18 10:26:07.648498+00
00000000-0000-0000-0000-000000000000	b6502b38-24ce-451d-abfc-99a5283a59d3	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-18 14:43:59.298891+00
00000000-0000-0000-0000-000000000000	8db516eb-e4ff-474d-bb88-b0ae345e71ca	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-18 14:43:59.302471+00
00000000-0000-0000-0000-000000000000	b02c777b-65ac-4b9f-bf79-76caba1c1ec0	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-18 15:00:52.442255+00
00000000-0000-0000-0000-000000000000	664f2526-c26a-4970-9633-a97f2bb94735	{"action":"user_confirmation_requested","actor_id":"d255c005-6465-4d27-82d8-5ab54d489246","actor_username":"selina.eicher@abacus.ch","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-08-19 08:03:32.899977+00
00000000-0000-0000-0000-000000000000	5fd9ff70-5cca-4cb2-8905-9791f8d62f0f	{"action":"user_signedup","actor_id":"d255c005-6465-4d27-82d8-5ab54d489246","actor_username":"selina.eicher@abacus.ch","actor_via_sso":false,"log_type":"team"}	2024-08-19 08:03:57.327097+00
00000000-0000-0000-0000-000000000000	381d4bce-c903-4073-9e3c-8d760614d4cf	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-19 08:54:13.471094+00
00000000-0000-0000-0000-000000000000	8b4a840d-efb6-42f5-93ff-09bd883cabd1	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-19 08:54:13.47433+00
00000000-0000-0000-0000-000000000000	b888baa5-0981-42ed-b09e-a9752023f6bb	{"action":"user_confirmation_requested","actor_id":"47805282-4c0d-42b1-b32b-1180f2201f76","actor_username":"norbert.kroll@umantis.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-08-19 09:50:03.977785+00
00000000-0000-0000-0000-000000000000	61cdfa67-9cbe-452f-8b56-38108b079e5d	{"action":"user_signedup","actor_id":"47805282-4c0d-42b1-b32b-1180f2201f76","actor_username":"norbert.kroll@umantis.com","actor_via_sso":false,"log_type":"team"}	2024-08-19 09:50:36.061016+00
00000000-0000-0000-0000-000000000000	b0edb9ec-6460-4ca8-bf62-3712606582b9	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"selina.eicher@abacus.ch","user_id":"d255c005-6465-4d27-82d8-5ab54d489246","user_phone":""}}	2024-08-19 10:36:32.428827+00
00000000-0000-0000-0000-000000000000	6b52ab3e-959f-4b04-86ce-7b28c632dda3	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"norbert.kroll@umantis.com","user_id":"47805282-4c0d-42b1-b32b-1180f2201f76","user_phone":""}}	2024-08-19 10:37:00.368385+00
00000000-0000-0000-0000-000000000000	2f44c367-4556-49b1-9f6c-8b81ebe569de	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-19 12:32:13.302557+00
00000000-0000-0000-0000-000000000000	03e0e617-a9f7-4f2b-99aa-325cdab01158	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-19 13:28:37.518063+00
00000000-0000-0000-0000-000000000000	1ac31aa1-9f7d-44df-86c1-214516965f58	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-19 13:28:37.520996+00
00000000-0000-0000-0000-000000000000	28b23724-58a8-4dd5-a869-c4fd72925407	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-19 14:04:29.274648+00
00000000-0000-0000-0000-000000000000	4276738e-dcfb-4d28-8d34-80536f64880c	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-19 14:04:29.276505+00
00000000-0000-0000-0000-000000000000	989ab9ca-dd3f-404b-984e-4e4253258524	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-19 14:04:32.631491+00
00000000-0000-0000-0000-000000000000	a13c4596-db9f-4c6d-9ffa-729fa5397a79	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-21 06:46:01.985918+00
00000000-0000-0000-0000-000000000000	03f8c438-35e2-405e-b73d-1e60ecf719fb	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-21 06:46:01.996438+00
00000000-0000-0000-0000-000000000000	1d3508ce-3394-45f6-b5f9-88515524230e	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-22 06:29:04.120472+00
00000000-0000-0000-0000-000000000000	c09c77d3-cc62-4894-852b-0d266d8b8f9b	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-22 07:31:58.010663+00
00000000-0000-0000-0000-000000000000	b9cbf66b-c4d7-40f0-bd12-3a0c0754796c	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-22 07:31:58.014802+00
00000000-0000-0000-0000-000000000000	a466524a-4abd-457c-8365-b39df1e649cf	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-22 07:32:05.598293+00
00000000-0000-0000-0000-000000000000	8ed5d154-1177-4320-8cbd-07e7d079bd62	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-22 10:36:56.475517+00
00000000-0000-0000-0000-000000000000	ff8ea475-9e07-4cd0-89b1-808b438885a0	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-22 20:27:10.11885+00
00000000-0000-0000-0000-000000000000	f8a5ab33-2b58-4efa-8287-c5912b07797d	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-22 20:27:10.120979+00
00000000-0000-0000-0000-000000000000	35b80b70-b4ee-445c-acf8-7840874d0c4e	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-23 07:28:09.981314+00
00000000-0000-0000-0000-000000000000	25b579f8-2d79-4d2f-9a14-b400895af96e	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-23 07:28:09.990454+00
00000000-0000-0000-0000-000000000000	72a1b2df-f105-4705-aa7c-73384c43be65	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-24 05:58:29.897178+00
00000000-0000-0000-0000-000000000000	4d386ae9-1359-4501-8e71-fece980f4a30	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-24 05:58:29.907061+00
00000000-0000-0000-0000-000000000000	6ddfaea6-f01f-4c0d-a955-e244f6d1db91	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-24 05:58:48.535154+00
00000000-0000-0000-0000-000000000000	b6bb3f9a-72fb-4d08-80a2-68361d8b8b28	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 10:12:49.706329+00
00000000-0000-0000-0000-000000000000	a7d9dc6b-429a-4391-88e7-faad24f47cf4	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 10:14:07.523009+00
00000000-0000-0000-0000-000000000000	cf0226c1-edb5-4e1e-acb6-03d780f0acde	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 10:49:41.352431+00
00000000-0000-0000-0000-000000000000	72632357-2c1e-4dab-8f84-9985b608666f	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-24 10:50:17.2441+00
00000000-0000-0000-0000-000000000000	30332906-0ecf-4201-be9e-23a114580fd3	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 11:18:52.941757+00
00000000-0000-0000-0000-000000000000	63886986-8121-4b0e-a9a8-95d7ee471631	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 11:18:56.77407+00
00000000-0000-0000-0000-000000000000	59996363-82ad-43cc-8fa4-a61a00014c38	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 11:19:02.578895+00
00000000-0000-0000-0000-000000000000	334096ab-2c16-4838-9cee-94fccba8d444	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 11:19:17.200351+00
00000000-0000-0000-0000-000000000000	b46099be-4ac4-4995-a575-b5c5ad5a1e0e	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 11:20:58.118387+00
00000000-0000-0000-0000-000000000000	a27b4f27-f4a0-44ca-b19e-f1f9e5211bb8	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 11:20:58.12483+00
00000000-0000-0000-0000-000000000000	aaf4a5fa-2944-463a-9ef3-37d993aae949	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 11:34:42.962684+00
00000000-0000-0000-0000-000000000000	095de6e9-373f-408a-b215-26f25f193776	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 11:34:42.964558+00
00000000-0000-0000-0000-000000000000	372af000-5a62-4d16-9063-87a40f582ae0	{"action":"logout","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-08-24 11:36:40.442215+00
00000000-0000-0000-0000-000000000000	b0fb5389-d023-4214-a966-ba9844100c77	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 11:39:34.487725+00
00000000-0000-0000-0000-000000000000	7efc8e83-c70b-4d13-a936-4154d404a6b7	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 12:14:34.498891+00
00000000-0000-0000-0000-000000000000	86776d47-d808-475a-b488-bb43abb46a93	{"action":"logout","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-08-24 12:18:37.050389+00
00000000-0000-0000-0000-000000000000	cb58bb67-f04d-41df-9216-23615a1290c8	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 12:19:45.656733+00
00000000-0000-0000-0000-000000000000	8066a1d3-2973-4d0c-8de8-4b4efc4b533e	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 12:20:35.157203+00
00000000-0000-0000-0000-000000000000	fd43b5b0-85ce-4d72-9fcd-480a8e819cdc	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 12:20:52.674032+00
00000000-0000-0000-0000-000000000000	576c99a3-ea0e-4472-ab52-46ab2f61178f	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 12:22:23.673491+00
00000000-0000-0000-0000-000000000000	dbf2f91f-41df-467e-9c67-64dadb765c19	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 12:30:37.995313+00
00000000-0000-0000-0000-000000000000	f75c8634-8145-46bd-8497-6b2ebe4b89f0	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 12:46:19.475382+00
00000000-0000-0000-0000-000000000000	8830ec35-2728-4071-b76b-4762089d6da1	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:19:48.258896+00
00000000-0000-0000-0000-000000000000	34d41990-08eb-4cf9-8988-52d1be2692bf	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:19:48.259761+00
00000000-0000-0000-0000-000000000000	ddc17b87-ed6c-4a26-82fe-ae11dfd386c4	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:20:44.763856+00
00000000-0000-0000-0000-000000000000	89f8b87c-f3d9-4784-83a1-8549899930bf	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:20:44.7645+00
00000000-0000-0000-0000-000000000000	3c910711-5be5-4608-80c3-5a05bdfe5507	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:25:48.896431+00
00000000-0000-0000-0000-000000000000	8ab6adee-c4b5-429b-86be-66a4ef6824c0	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:25:48.89838+00
00000000-0000-0000-0000-000000000000	8ec0a335-5f86-462c-a58f-b948610fd7cf	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:31:01.555327+00
00000000-0000-0000-0000-000000000000	e96305c6-ffaf-49c8-b556-6faa826462ee	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 13:31:01.558258+00
00000000-0000-0000-0000-000000000000	6477db22-e729-41fe-a0a1-a4f5d5d610c5	{"action":"logout","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account"}	2024-08-24 13:39:02.157939+00
00000000-0000-0000-0000-000000000000	ad207c8e-700b-4260-b1d0-9da36e9bd767	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 13:39:52.277673+00
00000000-0000-0000-0000-000000000000	c505d554-714d-43e3-bef8-9e3ea08dceef	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 14:08:52.907626+00
00000000-0000-0000-0000-000000000000	778c6753-bb00-43d8-ac1d-593dcb0757ad	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 14:11:27.886464+00
00000000-0000-0000-0000-000000000000	5c9d1b08-0b70-43dc-9d6a-7fcda7ce9863	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 14:20:23.939472+00
00000000-0000-0000-0000-000000000000	a3d4ce1e-99cf-4a83-8422-3faf661fce9b	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 14:26:51.115239+00
00000000-0000-0000-0000-000000000000	950f84af-6662-428a-a1aa-065606c0b376	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 14:31:59.975891+00
00000000-0000-0000-0000-000000000000	e7591f0d-4fe2-4572-893e-586a269516af	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 15:03:06.847187+00
00000000-0000-0000-0000-000000000000	19dd63b2-4586-4408-9c73-874bab974ecd	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 15:08:20.899562+00
00000000-0000-0000-0000-000000000000	4e7a85d0-d528-483f-85c9-5a3a6899130f	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 15:08:20.902291+00
00000000-0000-0000-0000-000000000000	5c16a8fa-26e3-4c99-bc41-2a2f55dbe91e	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 15:09:58.648345+00
00000000-0000-0000-0000-000000000000	eb920394-74dc-43dd-b991-a3dd3c968e4f	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 15:09:58.649423+00
00000000-0000-0000-0000-000000000000	34a7afc6-9e02-4aa1-a277-1f7984e081b9	{"action":"login","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-24 15:19:50.200099+00
00000000-0000-0000-0000-000000000000	5b7e7f80-3c3c-4c0a-915e-2eed6944bd8b	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 15:20:38.048096+00
00000000-0000-0000-0000-000000000000	6666f2c2-892e-48ec-b38f-dfee756ced5c	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 15:20:38.048839+00
00000000-0000-0000-0000-000000000000	6df00aab-b148-47dd-b3ce-d59f6c685460	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 16:01:25.566606+00
00000000-0000-0000-0000-000000000000	b527643c-ca9b-430a-b969-ea2a05c15037	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 16:01:25.568439+00
00000000-0000-0000-0000-000000000000	b83b4705-bcc9-4f35-a23c-3e8a1de7dd1a	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 16:46:44.0569+00
00000000-0000-0000-0000-000000000000	af8ae153-1ea5-4a63-bc55-1846328460ba	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 16:46:44.057867+00
00000000-0000-0000-0000-000000000000	1631765b-77a0-49bc-b021-ed81d82115dc	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 17:32:15.578957+00
00000000-0000-0000-0000-000000000000	f9728b72-c082-4bb1-8897-9a9ec8ce9df7	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 17:32:15.582108+00
00000000-0000-0000-0000-000000000000	839e988f-6f7b-4315-98b3-902e71eb175f	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 17:56:35.08263+00
00000000-0000-0000-0000-000000000000	8300a884-ac63-405d-82ad-34ca9686b343	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 17:56:35.085125+00
00000000-0000-0000-0000-000000000000	e86e57c3-f488-4116-a058-cf4dac6cf65a	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 20:10:34.766618+00
00000000-0000-0000-0000-000000000000	56f3efba-0302-4c55-94b6-6aa3bfe5815b	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 20:10:34.76814+00
00000000-0000-0000-0000-000000000000	f3396ca2-5ec2-4438-9cb0-a86cd66135ff	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 21:20:13.230828+00
00000000-0000-0000-0000-000000000000	813392e5-2ebf-4bee-aa7c-e853b20f19b2	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 21:20:13.24092+00
00000000-0000-0000-0000-000000000000	19ae26ca-0a5a-467c-8a77-c2aad9e8b132	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 22:21:05.781712+00
00000000-0000-0000-0000-000000000000	fe67f09c-82f8-422f-8459-83f06710ebeb	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-24 22:21:05.784859+00
00000000-0000-0000-0000-000000000000	3880a4ea-3c02-4e9c-93de-3c1b17fa852f	{"action":"token_refreshed","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-25 05:02:51.098543+00
00000000-0000-0000-0000-000000000000	d4b96b6e-f8b3-492d-9bbd-451b7e6cc2d2	{"action":"token_revoked","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-08-25 05:02:51.105705+00
00000000-0000-0000-0000-000000000000	1f6dd17a-9460-45a3-8226-18c3b671b54a	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-25 09:09:31.109874+00
00000000-0000-0000-0000-000000000000	a908904c-de87-45e2-b7eb-147f212fc5be	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-25 09:09:31.113566+00
00000000-0000-0000-0000-000000000000	74f08f19-8f7b-4699-a706-f650f8251e8a	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-25 17:19:38.389672+00
00000000-0000-0000-0000-000000000000	68223f22-530e-4990-9637-bebfd4f8d0f5	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-25 17:19:38.394061+00
00000000-0000-0000-0000-000000000000	e895eaef-9cfa-4968-a52d-e647d5ef8fa2	{"action":"login","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-08-25 20:02:21.666762+00
00000000-0000-0000-0000-000000000000	f084fed7-2fac-4b05-9893-3948647fa3b5	{"action":"logout","actor_id":"8771772d-85ab-4ac5-8536-025e17953b9f","actor_username":"deepkloud@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-08-25 20:02:46.240246+00
00000000-0000-0000-0000-000000000000	fa8d5d4e-86cc-4fe0-b032-3ad2481ed52d	{"action":"token_refreshed","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-25 20:56:02.63221+00
00000000-0000-0000-0000-000000000000	b14048c3-127b-423e-a9fa-e7cea076013a	{"action":"token_revoked","actor_id":"26c64a63-8adc-46de-b872-2e5061440cb0","actor_username":"sara.corradini+1@abacus.ch","actor_via_sso":false,"log_type":"token"}	2024-08-25 20:56:02.635311+00
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
8771772d-85ab-4ac5-8536-025e17953b9f	8771772d-85ab-4ac5-8536-025e17953b9f	{"sub": "8771772d-85ab-4ac5-8536-025e17953b9f", "email": "deepkloud@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-07-25 13:48:01.371325+00	2024-07-25 13:48:01.371385+00	2024-07-25 13:48:01.371385+00	dc2a7e1e-0946-4667-a0dd-1043bc856b57
26c64a63-8adc-46de-b872-2e5061440cb0	26c64a63-8adc-46de-b872-2e5061440cb0	{"sub": "26c64a63-8adc-46de-b872-2e5061440cb0", "email": "sara.corradini+1@abacus.ch", "lastname": "PP 1", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	email	2024-07-29 08:34:47.127492+00	2024-07-29 08:34:47.127556+00	2024-07-29 08:34:47.127556+00	5caebffa-14d5-4642-9bae-e1cd2f610ec2
0a07c83a-2551-40b1-8c54-bfa3182e8eb8	0a07c83a-2551-40b1-8c54-bfa3182e8eb8	{"sub": "0a07c83a-2551-40b1-8c54-bfa3182e8eb8", "email": "sara.corradini+5@abacus.ch", "lastname": "PP 5", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	email	2024-07-29 10:49:28.302152+00	2024-07-29 10:49:28.302202+00	2024-07-29 10:49:28.302202+00	e2656d37-73d8-4ffc-b824-217ad69dff77
11c8b85e-1552-4567-85aa-44675329b390	11c8b85e-1552-4567-85aa-44675329b390	{"sub": "11c8b85e-1552-4567-85aa-44675329b390", "email": "sara.corradini+4@abacus.ch", "lastname": "PP 4", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	email	2024-07-29 11:51:43.511376+00	2024-07-29 11:51:43.51143+00	2024-07-29 11:51:43.51143+00	00f12c17-5a94-4faa-a14d-15ac9f07acac
1628825d-acbf-4c08-90da-0487da9e29a2	1628825d-acbf-4c08-90da-0487da9e29a2	{"sub": "1628825d-acbf-4c08-90da-0487da9e29a2", "email": "sara.corradini+2@abacus.ch", "lastname": "PP2", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	email	2024-07-29 15:45:27.34382+00	2024-07-29 15:45:27.343868+00	2024-07-29 15:45:27.343868+00	f96ff006-b293-48b3-9c40-45045e279fa8
3ffbdd1b-f4b7-4ab4-9f6c-1150f414b4a0	3ffbdd1b-f4b7-4ab4-9f6c-1150f414b4a0	{"sub": "3ffbdd1b-f4b7-4ab4-9f6c-1150f414b4a0", "email": "sara.corradini@abacus.ch", "email_verified": false, "phone_verified": false}	email	2024-08-06 10:43:36.72777+00	2024-08-06 10:43:36.727852+00	2024-08-06 10:43:36.727852+00	29192c03-b7cf-44a8-9341-27161f6693c2
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
6e35a5a5-48a5-4f91-b35a-cfcf44ada134	2024-08-24 13:39:52.287241+00	2024-08-24 13:39:52.287241+00	password	c8ad82b7-e3e0-4123-8046-86c46ac5c336
b39ca755-b4f1-400b-8451-f888b0e88399	2024-08-24 14:08:52.916224+00	2024-08-24 14:08:52.916224+00	password	53d3d257-364e-460c-bc99-f95e81ed63ee
dc86cf08-27bd-4596-974b-1da637c1f3a9	2024-08-24 14:11:27.900092+00	2024-08-24 14:11:27.900092+00	password	d46c9552-e593-47f9-b097-e7804a010475
33466e96-c03d-4df1-ac45-dabc48f51779	2024-08-24 14:20:23.946548+00	2024-08-24 14:20:23.946548+00	password	0dd604ed-dfad-4290-9b2f-9966d9d483d2
9703164b-742e-4a04-a509-18b449fff22b	2024-08-24 14:31:59.981494+00	2024-08-24 14:31:59.981494+00	password	075056a5-d9d8-452b-af4d-14f9271b7d66
c40cc915-43dd-4839-be55-280b97941794	2024-08-24 15:03:06.853627+00	2024-08-24 15:03:06.853627+00	password	b62b6694-e2a5-470d-9696-471969cf0e99
3559ac52-4bf7-49a3-89bf-3bdcdcca6de6	2024-08-24 15:19:50.206769+00	2024-08-24 15:19:50.206769+00	password	93083b44-289d-407d-aeec-f582d69ad614
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
34f3a3e6-41dc-4bab-ae07-35d5a95918d4	1628825d-acbf-4c08-90da-0487da9e29a2	confirmation_token	bb9c4790bca67d854c07c49e2c7e832b92e48ff2f2004f397aceacf2	sara.corradini+2@abacus.ch	2024-07-29 15:45:28.705528	2024-07-29 15:45:28.705528
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	189	DAr1dqxd825Uj-POQIoRdg	26c64a63-8adc-46de-b872-2e5061440cb0	f	2024-08-24 14:11:27.895733+00	2024-08-24 14:11:27.895733+00	\N	dc86cf08-27bd-4596-974b-1da637c1f3a9
00000000-0000-0000-0000-000000000000	192	kLU2rXAoQppLGorcdriphQ	26c64a63-8adc-46de-b872-2e5061440cb0	f	2024-08-24 14:31:59.979397+00	2024-08-24 14:31:59.979397+00	\N	9703164b-742e-4a04-a509-18b449fff22b
00000000-0000-0000-0000-000000000000	187	TQ251VevI1WPuIb7fpwrng	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 13:39:52.283062+00	2024-08-24 15:08:20.902973+00	\N	6e35a5a5-48a5-4f91-b35a-cfcf44ada134
00000000-0000-0000-0000-000000000000	188	6h-8RgIMdwVBelGi3AX3Lw	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 14:08:52.913652+00	2024-08-24 15:09:58.650034+00	\N	b39ca755-b4f1-400b-8451-f888b0e88399
00000000-0000-0000-0000-000000000000	195	fl1uGernMFMtV5KDICO2ew	26c64a63-8adc-46de-b872-2e5061440cb0	f	2024-08-24 15:09:58.650833+00	2024-08-24 15:09:58.650833+00	6h-8RgIMdwVBelGi3AX3Lw	b39ca755-b4f1-400b-8451-f888b0e88399
00000000-0000-0000-0000-000000000000	190	iedEleT0YqeNKRtwzVadmw	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 14:20:23.943292+00	2024-08-24 15:20:38.049544+00	\N	33466e96-c03d-4df1-ac45-dabc48f51779
00000000-0000-0000-0000-000000000000	193	jMwR_pJJatnCW44uToFFWw	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 15:03:06.850687+00	2024-08-24 16:01:25.569057+00	\N	c40cc915-43dd-4839-be55-280b97941794
00000000-0000-0000-0000-000000000000	196	cBAW7zibq8bitSgEdtWjig	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 15:19:50.203785+00	2024-08-24 16:46:44.058413+00	\N	3559ac52-4bf7-49a3-89bf-3bdcdcca6de6
00000000-0000-0000-0000-000000000000	194	tza2KegWbUx31oaKEYKuBw	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 15:08:20.904322+00	2024-08-24 17:32:15.582697+00	TQ251VevI1WPuIb7fpwrng	6e35a5a5-48a5-4f91-b35a-cfcf44ada134
00000000-0000-0000-0000-000000000000	199	bqO_02SLIdxs3HLDrH4FVQ	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 16:46:44.059089+00	2024-08-24 17:56:35.085839+00	cBAW7zibq8bitSgEdtWjig	3559ac52-4bf7-49a3-89bf-3bdcdcca6de6
00000000-0000-0000-0000-000000000000	200	eRB60lwr2ki-aSrqKCQV0w	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 17:32:15.584925+00	2024-08-24 20:10:34.769592+00	tza2KegWbUx31oaKEYKuBw	6e35a5a5-48a5-4f91-b35a-cfcf44ada134
00000000-0000-0000-0000-000000000000	202	fBKLcvqygefGqw41WNsaYA	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 20:10:34.772584+00	2024-08-24 21:20:13.242549+00	eRB60lwr2ki-aSrqKCQV0w	6e35a5a5-48a5-4f91-b35a-cfcf44ada134
00000000-0000-0000-0000-000000000000	203	thRpVeZe_eKflnP3o6Lfig	26c64a63-8adc-46de-b872-2e5061440cb0	f	2024-08-24 21:20:13.24473+00	2024-08-24 21:20:13.24473+00	fBKLcvqygefGqw41WNsaYA	6e35a5a5-48a5-4f91-b35a-cfcf44ada134
00000000-0000-0000-0000-000000000000	198	WSTsb82_XtjofIvz2Dwmsg	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 16:01:25.570393+00	2024-08-24 22:21:05.785458+00	jMwR_pJJatnCW44uToFFWw	c40cc915-43dd-4839-be55-280b97941794
00000000-0000-0000-0000-000000000000	204	Lb1C23k_NLnT19Bo-6fBJw	26c64a63-8adc-46de-b872-2e5061440cb0	f	2024-08-24 22:21:05.788058+00	2024-08-24 22:21:05.788058+00	WSTsb82_XtjofIvz2Dwmsg	c40cc915-43dd-4839-be55-280b97941794
00000000-0000-0000-0000-000000000000	197	qgeralWCBm3F5vrvqdtl_A	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 15:20:38.050286+00	2024-08-25 09:09:31.115026+00	iedEleT0YqeNKRtwzVadmw	33466e96-c03d-4df1-ac45-dabc48f51779
00000000-0000-0000-0000-000000000000	206	HUZX3J4ld_O1ntiRvkSNUQ	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-25 09:09:31.123116+00	2024-08-25 17:19:38.394668+00	qgeralWCBm3F5vrvqdtl_A	33466e96-c03d-4df1-ac45-dabc48f51779
00000000-0000-0000-0000-000000000000	207	H-pnMa0TR4HOIJbxHLE3UA	26c64a63-8adc-46de-b872-2e5061440cb0	f	2024-08-25 17:19:38.403499+00	2024-08-25 17:19:38.403499+00	HUZX3J4ld_O1ntiRvkSNUQ	33466e96-c03d-4df1-ac45-dabc48f51779
00000000-0000-0000-0000-000000000000	201	0km_vLLy948uXrZiHdqszw	26c64a63-8adc-46de-b872-2e5061440cb0	t	2024-08-24 17:56:35.087101+00	2024-08-25 20:56:02.637241+00	bqO_02SLIdxs3HLDrH4FVQ	3559ac52-4bf7-49a3-89bf-3bdcdcca6de6
00000000-0000-0000-0000-000000000000	209	qhWZYaRIaickIq_0A8jhvg	26c64a63-8adc-46de-b872-2e5061440cb0	f	2024-08-25 20:56:02.640131+00	2024-08-25 20:56:02.640131+00	0km_vLLy948uXrZiHdqszw	3559ac52-4bf7-49a3-89bf-3bdcdcca6de6
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
33466e96-c03d-4df1-ac45-dabc48f51779	26c64a63-8adc-46de-b872-2e5061440cb0	2024-08-24 14:20:23.94134+00	2024-08-25 17:19:38.413779+00	\N	aal1	\N	2024-08-25 17:19:38.413692	Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1	213.55.184.87	\N
9703164b-742e-4a04-a509-18b449fff22b	26c64a63-8adc-46de-b872-2e5061440cb0	2024-08-24 14:31:59.976971+00	2024-08-24 14:31:59.976971+00	\N	aal1	\N	\N	Mozilla/5.0 (iPhone; CPU iPhone OS 16_7_8 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1	213.55.190.133	\N
3559ac52-4bf7-49a3-89bf-3bdcdcca6de6	26c64a63-8adc-46de-b872-2e5061440cb0	2024-08-24 15:19:50.201256+00	2024-08-25 20:56:02.6447+00	\N	aal1	\N	2024-08-25 20:56:02.644623	Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1	80.89.223.251	\N
b39ca755-b4f1-400b-8451-f888b0e88399	26c64a63-8adc-46de-b872-2e5061440cb0	2024-08-24 14:08:52.910649+00	2024-08-24 15:09:58.653435+00	\N	aal1	\N	2024-08-24 15:09:58.65334	Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1	194.230.161.89	\N
dc86cf08-27bd-4596-974b-1da637c1f3a9	26c64a63-8adc-46de-b872-2e5061440cb0	2024-08-24 14:11:27.891167+00	2024-08-24 14:11:27.891167+00	\N	aal1	\N	\N	Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1	194.230.161.209	\N
6e35a5a5-48a5-4f91-b35a-cfcf44ada134	26c64a63-8adc-46de-b872-2e5061440cb0	2024-08-24 13:39:52.280214+00	2024-08-24 21:20:13.247664+00	\N	aal1	\N	2024-08-24 21:20:13.247582	Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1	194.230.161.209	\N
c40cc915-43dd-4839-be55-280b97941794	26c64a63-8adc-46de-b872-2e5061440cb0	2024-08-24 15:03:06.848511+00	2024-08-24 22:21:05.790818+00	\N	aal1	\N	2024-08-24 22:21:05.790743	Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1	213.55.185.104	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	1628825d-acbf-4c08-90da-0487da9e29a2	authenticated	authenticated	sara.corradini+2@abacus.ch	$2a$10$wL9lfnHbJi64vZJduXhtL.8epqIJaLcCTG1X1yWau7/xk5teWBqZG	\N	\N	bb9c4790bca67d854c07c49e2c7e832b92e48ff2f2004f397aceacf2	2024-07-29 15:45:27.348829+00		\N			\N	\N	{"provider": "email", "providers": ["email"], "userroles": ["HELPER"]}	{"sub": "1628825d-acbf-4c08-90da-0487da9e29a2", "email": "sara.corradini+2@abacus.ch", "lastname": "PP2", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	\N	2024-07-29 15:45:27.339805+00	2024-07-29 15:45:28.703588+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	11c8b85e-1552-4567-85aa-44675329b390	authenticated	authenticated	sara.corradini+4@abacus.ch	$2a$10$fyZOZfob0oLyZIfBaAuHku6up5.NLfnVI3e2Je3SXw9k9MivN6Y7u	2024-07-29 11:52:01.519073+00	\N		2024-07-29 11:51:43.515519+00		\N			\N	2024-08-08 10:49:14.351146+00	{"provider": "email", "providers": ["email"], "userroles": ["HELPER"]}	{"sub": "11c8b85e-1552-4567-85aa-44675329b390", "email": "sara.corradini+4@abacus.ch", "lastname": "PP 4", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	\N	2024-07-29 11:51:43.507236+00	2024-08-08 10:49:14.358202+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	0a07c83a-2551-40b1-8c54-bfa3182e8eb8	authenticated	authenticated	sara.corradini+5@abacus.ch	$2a$10$M6e7Xxu3GCLW4QzdIo8p5eF5BcN2cBQx0Liqpvdd4z4gHgh5j1ylK	2024-07-29 11:52:11.49261+00	\N		2024-07-29 10:49:28.306761+00		\N			\N	2024-08-08 10:50:14.199498+00	{"provider": "email", "providers": ["email"], "userroles": ["HELPER"]}	{"sub": "0a07c83a-2551-40b1-8c54-bfa3182e8eb8", "email": "sara.corradini+5@abacus.ch", "lastname": "PP 5", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	\N	2024-07-29 10:49:28.296691+00	2024-08-08 10:50:14.201707+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	3ffbdd1b-f4b7-4ab4-9f6c-1150f414b4a0	authenticated	authenticated	sara.corradini@abacus.ch	$2a$10$d.BVIADUaK9.klmy3cPkXutXqhivP8V.RHdDDmTexZp6tB.FJgcai	2024-08-06 10:43:36.734439+00	\N		\N		\N			\N	2024-08-06 10:45:32.11226+00	{"provider": "email", "providers": ["email"], "userroles": ["ADMIN"]}	{}	\N	2024-08-06 10:43:36.715232+00	2024-08-06 10:45:32.116625+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	8771772d-85ab-4ac5-8536-025e17953b9f	authenticated	authenticated	deepkloud@gmail.com	$2a$10$sEyKgUMBzEc8saSeeCCbJO0RmjHKUa8Kb6c7/iIjeLPWBZu5r07p6	2024-07-25 13:48:01.374104+00	\N		\N		\N			\N	2024-08-25 20:02:21.685297+00	{"provider": "email", "providers": ["email"], "userroles": ["ADMIN"]}	{}	\N	2024-07-25 13:48:01.369853+00	2024-08-25 20:02:21.712298+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	26c64a63-8adc-46de-b872-2e5061440cb0	authenticated	authenticated	sara.corradini+1@abacus.ch	$2a$10$EUhsVdkGJYHlDbB8QXvvienuFCogbMv10NdVUhi0Sv4I7/abmWsQ.	2024-07-29 11:52:21.341059+00	\N		2024-07-29 08:34:47.132742+00		\N			\N	2024-08-24 15:19:50.201181+00	{"provider": "email", "providers": ["email"], "userroles": ["HELPER"]}	{"sub": "26c64a63-8adc-46de-b872-2e5061440cb0", "email": "sara.corradini+1@abacus.ch", "lastname": "PP 1", "firstname": "STAFF", "email_verified": false, "phone_verified": false}	\N	2024-07-29 08:34:47.11999+00	2024-08-25 20:56:02.641565+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: parking_lots; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.parking_lots (id, created_at, location, total_slots, filled_slots, location_url, name) FROM stdin;
33989f17-7b33-40bb-8ae3-ddb2bc188efb	2024-07-25 14:39:04.812443+00	Wittenbach	10	0	https://maps.app.goo.gl/Y7GoCo2NF5hHQdQs6	{"de":"AbaHome I - alte TG","en":"AbaHome I - Parking ","fr":"AbaHome I - Parking Garage","it":"AbaHome I - Autosilo"}
96077a70-5166-4bbe-b556-992eb81b7e57	2024-07-25 14:49:04.591655+00	Wittenbach	75	0	https://maps.app.goo.gl/ECYdCJipwyYQh9WY6	{"de":"Obvita","en":"Obvita","fr":"Obvita","it":"Obvita"}
4861d28e-eaf7-435f-9a4b-15fd9c652f46	2024-07-25 14:49:21.359125+00	St. Fiden	70	0	https://maps.app.goo.gl/HdMhUayJB74874D16	{"de":"Abacus St. Fiden ","en":"Abacus St. Fiden ","fr":"Abacus St. Fiden ","it":"Abacus St. Fiden "}
\.


--
-- Data for Name: program_timeline; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.program_timeline (id, created_at, locations, time_start, time_end, icon, category, title, note) FROM stdin;
eb98efc4-dbec-48e3-aba4-e22cc8b16d18	2024-07-31 05:16:16.535789+00	{"Abacus Campus"}	14.00 h	16.00 h	mdi-panda	KIDS	{"de":"Foggy 🐸","en":"Foggy 🐸","fr":"Foggy 🐸","it":"Foggy 🐸"}	{"de":"(Foggy verteilt Give-Aways an Kids)","en":"(Foggy hands out give-aways to kids)","fr":"(Foggy distribue des cadeaux aux enfants)","it":"(Foggy distribuisce give-aways ai bambini)"}
8b47c0e2-819f-47a8-8f9a-ca6ddf296a9f	2024-07-30 19:21:56.815223+00	{Festzelt/Party-Tent}	17.00 h	18.00 h	mdi-music	ADULTS	{"de":"Catalyst 🎷","en":"Catalyst  🎷","fr":"Catalyst  🎷","it":"Catalyst 🎷"}	{"de":"https://www.catalyst-official.com/","en":"https://www.catalyst-official.com/","fr":"https://www.catalyst-official.com/","it":"https://www.catalyst-official.com/"}
878f7ffd-ae01-4487-adb5-20fc0bf18674	2024-07-31 05:19:28.478929+00	{"Draussen beim Festzelt/Outside Party Tent"}	14.00 h	17.00 h	mdi-silverware-fork-knife	KIDS	{"de":"Zuckerwatte 🍡","en":"Cotton candy 🍡","fr":"Barbe à papa 🍡","it":"Zucchero filato 🍡"}	{"de":"","en":"","fr":"","it":""}
9f85fe83-2661-43fe-9978-b10596c260d7	2024-07-31 05:50:44.391055+00	{"Next to the Welcome Desk"}	14.00 h	17.30 h	mdi-glass-cocktail	BEVERAGE	{"de":"Cocotero 🥥","en":"Cocotero  🥥","fr":"Cocotero  🥥","it":"Cocotero  🥥"}	{"de":"Frische Kokosnüsse ","en":"Fresh coconuts ","fr":"Noix de coco fraîches ","it":"Cocco fresco "}
5689f777-fe2b-498a-b3a8-8fa3d793f699	2024-07-31 06:02:06.208254+00	{"Garden Al Covo"}	14.00 h	21.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Pizza 🍕","en":"Pizza 🍕","fr":"Pizza 🍕","it":"Pizza 🍕"}	{"de":"","en":"","fr":"","it":""}
72549716-834e-4cf3-83c5-931cc97f9321	2024-07-31 05:15:29.892847+00	{"Next to the Welcome Desk"}	14.00 h	17.30 h	mdi-cup-outline	KIDS	{"de":"Cocotero 🥥","en":"Cocotero 🥥","fr":"Cocotero 🥥","it":"Cocotero 🥥"}	{"de":"Frische Kokosnüsse","en":"Fresh coconuts","fr":"Noix de coco fraîches","it":"Cocco fresco"}
1df03564-e12c-45d8-ab8e-ac9de4903788	2024-07-31 05:54:16.493+00	{"AbaHome 2 - Groundfloor/Silent Disco"}	21.00 h	1.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Sparklys Hard Seltzer 🧃","en":"Sparklys Hard Seltzer 🧃","fr":"Sparklys Hard Seltzer 🧃","it":"Sparklys Hard Seltzer 🧃"}	{"de":"https://sparklys.ch/","en":"https://sparklys.ch/","fr":"https://sparklys.ch/","it":"https://sparklys.ch/"}
2c1a9604-8318-4d9b-af8f-0fea2c53147f	2024-07-31 05:20:16.330959+00	{Festzelt/Party-Tent}	15.00 h	16.00 h	mdi-music	KIDS	{"de":"AbaBand 🎶","en":"AbaBand 🎶","fr":"AbaBand 🎶","it":"AbaBand 🎶"}	{"de":"","en":"","fr":"","it":""}
853e1901-0f8f-4a04-bfb7-299228495419	2024-07-31 05:56:29.882771+00	{"AbaHome 2 - Groundfloor"}	21.00 h	1.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Bar Silent Disco 🍻🍷","en":"Bar Silent Disco 🍻🍷","fr":"Bar Silent Disco 🍻🍷","it":"Bar Silent Disco 🍻🍷"}	{"de":"(Diese Bar hat keine Cocktails)","en":"(This bar doesn`t have cocktails)","fr":"(Ce bar ne propose pas de cocktails)","it":"(Questo bar non offre cocktail)"}
747b2991-cdbf-4bfc-a316-039a8c87a4ca	2024-07-31 06:04:45.071325+00	{"Garden Al Covo"}	17.00 h	21.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Tortellini 🍝","en":"Tortellini 🍝","fr":"Tortellini 🍝","it":"Tortellini 🍝"}	{"de":"","en":"","fr":"","it":""}
93bb84d4-d4cc-4b75-ae03-c38a5afe2deb	2024-07-31 06:04:22.598059+00	{"Next to the Party-Tent"}	14.00 h	17.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Früchte 🍉 ","en":"Fruits🍉","fr":"Fruits 🍉","it":"Frutta 🍉"}	{"de":"","en":"","fr":"","it":""}
e55728cb-8c54-44af-a616-c1fcf5a05a6c	2024-07-30 18:53:18.245037+00	{Festzelt/Party-Tent}	15.00 h	16.00 h	mdi-music	ADULTS	{"de":"AbaBand 🎷","en":"AbaBand 🎷","fr":"AbaBand 🎷","it":"AbaBand 🎷"}	{"de":"","en":"","fr":"","it":""}
ffc9e5f4-d8c7-40dd-a635-afd1f51ccb65	2024-07-30 19:23:47.940655+00	{"AbaHome 2","3th Floor"}	21.00 h	01.00 h	mdi-microphone-variant	ADULTS	{"de":"Karaoke 🪩🎤","en":"Karaoke 🪩🎤","fr":"Karaoke 🪩🎤","it":"Karaoke 🪩🎤"}	{"de":"","en":"","fr":"","it":""}
7f05bce6-0a7f-4ac8-ac86-f034371f5c27	2024-07-31 07:08:04.78877+00	{"Next to the Party-Tent"}	14.00 h	17.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Popcorn 🍿","en":"Popcorn 🍿","fr":"Popcorn 🍿","it":"Popcorn 🍿"}	{"de":"","en":"","fr":"","it":""}
0bb1e949-a69b-414f-95cb-e2371e844a81	2024-07-31 06:01:20.820171+00	{"Next to the Party-Tent"}	17.00 h	21.00 h	mdi-silverware-fork-knife	FOOD	{"de":"BBQ 🍖","en":"BBQ 🍖","fr":"BBQ 🍖","it":"BBQ 🍖"}	{"de":"","en":"","fr":"","it":""}
9e9354e9-dd0d-4ea9-a8bc-f509f9ffb17b	2024-07-30 20:26:36.836026+00	{"Next to the Party-Tent"}	17.00 h	21.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Risotto 🍛","en":"Risotto 🍛","fr":"Risotto 🍛","it":"Risotto 🍛"}	{"de":"","en":"","fr":"","it":""}
59c6f89e-c660-46f2-9ae5-7d9af9ddcca8	2024-08-06 07:46:07.36962+00	{"AbaHome 1 & AbaHome 2"}	14.00 h	22.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Glacé 🍦","en":"Ice Cream 🍦","fr":"Glacé 🍦","it":"Gelato 🍦"}	{"de":"","en":"","fr":"","it":""}
bda66b29-919a-4286-95e2-4c6b601b9afa	2024-08-06 08:04:30.588857+00	{"Al Covo "}	22.00 h	1.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Pizza & Wienerli mit Bürli 🍕🌭","en":"Pizza & Sausage with Bread 🍕🌭","fr":"Pizza & saucisses avec pain 🍕🌭","it":"Pizza & wurstel con pane 🍕🌭"}	{"de":"","en":"","fr":"","it":""}
b3b0bc04-23e8-449c-8eca-de37d94c173d	2024-07-30 19:24:27.005606+00	{"AbaHome 2",EG/Groundfloor}	21.00 h	01.00 h	mdi-music-circle	ADULTS	{"de":"Silent Disco by MUTED 🪩🎧","en":"Silent Disco by MUTED 🪩🎧","fr":"Silent Disco by MUTED 🪩🎧","it":"Silent Disco by MUTED 🪩🎧"}	{"de":" https://www.muted.ch/  ","en":"https://www.muted.ch/ ","fr":"https://www.muted.ch/ ","it":"https://www.muted.ch/ "}
32367fc2-f9da-4e2d-af21-4320b8af3bd7	2024-07-31 05:12:53.106525+00	{"Outdoor Parking Lot-AbaHome 2"}	14.00 h	18.00 h	mdi-surfing	KIDS	{"de":"Surfsimulator 🏄‍♀","en":"Surfsimulator 🏄‍♀","fr":"Surfsimulator 🏄‍♀","it":"Surfsimulator 🏄‍♀"}	{"de":"Surfsimulator","en":"Surf Simulator","fr":"Simulateur de surf","it":"Simulatore di surf"}
be75583e-8070-4138-a117-10d8a4c469dd	2024-07-31 07:09:13.310193+00	{"Draussen beim Festzelt/Outside Party Tent"}	14.00 h	17.00 h	mdi-popcorn	KIDS	{"de":"Popcorn 🍿","en":"Popcorn 🍿","fr":"Popcorn 🍿","it":"Popcorn 🍿"}	{"de":"","en":"","fr":"","it":""}
8e99fb17-8499-433d-bc34-6ff3606fea19	2024-08-06 08:18:54.983154+00	{"AbaHome 1 - Pool Area"}	14.00 h	18.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Vera`s Crêpes 🥞","en":"Vera`s Crêpes 🥞","fr":"Vera`s Crêpes 🥞","it":"Vera`s Crêpes 🥞"}	{"de":"","en":"","fr":"","it":""}
8310cd6c-3066-46ae-9afa-2bbf73b05cbf	2024-07-31 07:12:22.270525+00	{"AbaHome 2 - Groundfloor"}	15.30 h	16.00 h	mdi-tortoise	KIDS	{"de":"Walter Zoo 🐘","en":"Walter Zoo 🐘","fr":"Walter Zoo 🐘","it":"Walter Zoo 🐘"}	{"de":"2. Tierbegegnung inkl. Vortrag","en":"2. Animal encounter with a lecture included","fr":"2. Rencontre avec les animaux avec conférence incluse","it":"2. Incontro con gli animali con conferenza inclusa"}
c200d028-26c6-4ecd-9d55-cb48ae7a19a7	2024-07-31 05:53:46.409006+00	{"AbaHome 1 - Pool Area"}	17.00 h	21.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Schnitzelbrot 🍔 ","en":"Schnitzel Sandwich 🍔","fr":"Sandwich au schnitzel 🍔","it":"Panino con cotoletta 🍔"}	{"de":"","en":"","fr":"","it":""}
1cef3e54-8202-46d2-a9dc-e39b51469a24	2024-07-31 05:04:35.943446+00	{"Al Covo"}	21.00 h	1.00 h	mdi-music-circle	ADULTS	{"de":"DJ Yohanna Laish 🪩","en":"DJ Yohanna Laish 🪩","fr":"DJ Yohanna Laish 🪩","it":"DJ Yohanna Laish 🪩"}	{"de":"https://www.instagram.com/yohannalaishofficial/","en":"https://www.instagram.com/yohannalaishofficial/","fr":"https://www.instagram.com/yohannalaishofficial/","it":"https://www.instagram.com/yohannalaishofficial/"}
e47ffe01-09c6-43b0-8c60-743fd6596e9a	2024-07-31 06:03:35.290099+00	{"Next to the Party-Tent"}	14.00 h	17.00 h	mdi-silverware-fork-knife	FOOD	{"de":"Zuckerwatte 🍡","en":"Cotton Candy  🍡","fr":"Barbe à Papa 🍡","it":"Zucchero Filato 🍡"}	{"de":"","en":"","fr":"","it":""}
3ea772af-f030-4f51-bf8b-5911ae2c51cf	2024-07-30 19:22:25.574142+00	{"AbaHome 1 - Pool Area"}	14.30 h	15.00 h	mdi-music	ADULTS	{"de":"Unplugged & African Dancers 🎸💃🏿","en":"Unplugged & African Dancers 🎸💃🏿","fr":"Unplugged & African Dancers 🎸💃🏿","it":"Unplugged & African Dancers 🎸💃🏿"}	{"de":"Bègue Mame Fallou Sénégal ","en":"Bègue Mame Fallou Sénégal ","fr":"Bègue Mame Fallou Sénégal ","it":"Bègue Mame Fallou Sénégal "}
be2411d0-254c-4c6d-aa00-e07c8a2f0e08	2024-07-31 05:18:55.19307+00	{"AbaHome 2 - Groundfloor"}	14.30 h	17.00 h	mdi-lipstick	KIDS	{"de":"Kinderschminken 💄","en":"Face painting 💄","fr":"Maquillage pour enfants 💄","it":"Trucco per bambini 💄"}	{"de":"","en":"","fr":"","it":""}
a79f9131-2f7e-45bf-8664-eb255c7aff5d	2024-07-30 19:17:35.519071+00	{"Festzelt/Party-Tent (AbaHome II if it rains)"}	18.00 h	18.30 h	mdi-microphone	ADULTS	{"de":"Speech Claudio Hintermann 🎤","en":"Speech Claudio Hintermann 🎤","fr":"Speech Claudio Hintermann 🎤","it":"Speech Claudio Hintermann 🎤"}	{"de":"Livebrodcast to Auditorium, AbaHome 2","en":"Livebrodcast to Auditorium, AbaHome 2","fr":"Livebrodcast to Auditorium, AbaHome 2","it":"Livebrodcast to Auditorium, AbaHome 2"}
d9ccbc5a-2e6f-4cbb-9c54-47e53e89b7fb	2024-07-31 05:59:04.824947+00	{"AbaHome 1 - Al Covo"}	22.00 h	1.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Bar Al Covo 🍻🍷","en":"Bar Al Covo 🍻🍷","fr":"Bar Al Covo 🍻🍷","it":"Bar Al Covo 🍻🍷"}	{"de":"(Diese Bar hat keine Cocktails)","en":"(This bar doesn`t have cocktails)","fr":"(Ce bar ne propose pas de cocktails)","it":"(Questo bar non offre cocktail)"}
42af1cf7-a4e4-4dc6-9d0b-796865939372	2024-08-06 09:26:28.224384+00	{"AbaHome 1 - Pyramide Bar"}	17.00 h	22.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Pyramiden Bar 🍻🍷","en":"Pyramid Bar 🍻🍷","fr":"Pyramide Bar 🍻🍷","it":"Piramide Bar 🍻🍷"}	{"de":"(Diese Bar hat keine Cocktails)","en":"(This bar doesn`t have cocktails)","fr":"(Ce bar ne propose pas de cocktails)","it":"(Questo bar non offre cocktail)"}
a1d6e965-6b64-43a2-afb1-a50f72c01a82	2024-07-31 05:18:14.903667+00	{"AbaHome 2 - Groundfloor"}	14.30 h	15.00 h	mdi-tortoise	KIDS	{"de":"Walter Zoo 🐘","en":"Walter Zoo 🐘","fr":"Walter Zoo 🐘","it":"Walter Zoo 🐘"}	{"de":"1. Tierbegegnung inkl. Vortrag","en":"1. Animal encounter with a lecture included","fr":"1.Rencontre avec les animaux avec conférence incluse","it":"1. Incontro con gli animali con conferenza inclusa"}
90a892b8-f92f-4518-9794-e73fdfd760da	2024-07-31 05:54:52.946876+00	{"Al Covo Garden"}	14.00 h	22.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Bar Al Covo Garden 🍹🍸","en":"Bar Al Covo Garden 🍹🍸 ","fr":"Bar Al Covo Garden 🍹🍸","it":"Bar Al Covo Garden 🍹🍸"}	{"de":"(Cocktails ab 17.00 h  - siehe Cocktailkarte)","en":"Cocktails from 17.00 h – see the cocktail menu","fr":"Cocktails à partir de 17h00 – voir la carte des cocktails","it":"Cocktail a partire dalle 17:00 – vedi il menu dei cocktail"}
518f6654-9c31-447c-b43b-172bf56b00c0	2024-07-31 05:55:43.489196+00	{Festzelt/Party-Tent}	14.00 h	22.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Bar Festzelt 🍹🍸","en":"Bar in the party-tent 🍹🍸","fr":"Bar dans le chapiteau 🍹🍸","it":"Bar sotto il tendone 🍹🍸"}	{"de":"(Cocktails ab 17.00 h  - siehe Cocktailkarte)","en":"Cocktails from 17.00 h – see the cocktail menu","fr":"Cocktails à partir de 17h00 – voir la carte des cocktails","it":"Cocktail a partire dalle 17:00 – vedi il menu dei cocktail"}
446cee25-33a6-4306-968d-a1f836873554	2024-07-30 19:23:07.869722+00	{Festzelt/Party-Tent}	20.00 h	21.00 h	mdi-music	ADULTS	{"de":"JLB Justina Lee Brown 🎷","en":"JLB Justina Lee Brown 🎷 ","fr":"JLB Justina Lee Brown 🎷","it":"JLB Justina Lee Brown 🎷"}	{"de":"https://justinaleebrown.com/","en":"https://justinaleebrown.com/","fr":"https://justinaleebrown.com/","it":"https://justinaleebrown.com/"}
c81517df-07d1-432c-9921-830790ecaba1	2024-07-30 19:16:59.384601+00	{Festzelt/Party-Tent}	19.30 h	20.00 h	mdi-music	ADULTS	{"de":"Unplugged & African Dancers 🎸💃🏿","en":"Unplugged & African Dancers 🎸💃🏿","fr":"Unplugged & African Dancers 🎸💃🏿","it":"Unplugged & African Dancers 🎸💃🏿"}	{"de":"Bègue Mame Fallou Sénégal","en":"Bègue Mame Fallou Sénégal","fr":"Bègue Mame Fallou Sénégal","it":"Bègue Mame Fallou Sénégal"}
b1a5aa87-224a-4daf-95f7-31b4c7d7173a	2024-08-15 07:17:25.656573+00	{"AbaHome 1 - Pool Area"}	16.30 h	17.00 h	mdi-music	ADULTS	{"de":"Unplugged & African Dancers 🎸💃🏿","fr":"Unplugged & African Dancers 🎸💃🏿","it":"Unplugged & African Dancers 🎸💃🏿","en":"Unplugged & African Dancers 🎸💃🏿"}	{"de":"Bègue Mame Fallou Sénégal","en":"Bègue Mame Fallou Sénégal","fr":"Bègue Mame Fallou Sénégal","it":"Bègue Mame Fallou Sénégal"}
ae73c766-c536-47d4-9b69-467c65d3f92d	2024-08-16 06:57:22.138366+00	{"AbaHome 2 - Groundloor"}	14.00 h	17.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Bar Kids Area","en":"Bar Kids Area","fr":"Bar Kids Area","it":"Bar Kids Area"}	{"de":"Bar zwischen 17.00-21.00 h geschlossen","en":"Bar closed between 17.00-21.00 h","it":"Bar chiuso tra le 17.00-21.00 h","fr":"Bar fermé de 17.00 à 21.00 h"}
62dbf6ed-f374-4883-9602-e99898b32453	2024-07-31 07:23:09.918451+00	{"AbaHome 1  - Pool Area"}	14.00 h	20.00 h	mdi-glass-cocktail	BEVERAGE	{"de":"Sparklys Hard Seltzer 🧃","en":"Sparklys Hard Seltzer 🧃","fr":"Sparklys Hard Seltzer 🧃","it":"Sparklys Hard Seltzer 🧃"}	{"de":"https://sparklys.ch/","en":"https://sparklys.ch/","fr":"https://sparklys.ch/","it":"https://sparklys.ch/"}
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: realtime; Owner: supabase_realtime_admin
--

COPY realtime.messages (id, topic, extension, inserted_at, updated_at) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2024-07-25 11:58:09
20211116045059	2024-07-25 11:58:09
20211116050929	2024-07-25 11:58:10
20211116051442	2024-07-25 11:58:10
20211116212300	2024-07-25 11:58:10
20211116213355	2024-07-25 11:58:10
20211116213934	2024-07-25 11:58:10
20211116214523	2024-07-25 11:58:10
20211122062447	2024-07-25 11:58:11
20211124070109	2024-07-25 11:58:11
20211202204204	2024-07-25 11:58:11
20211202204605	2024-07-25 11:58:11
20211210212804	2024-07-25 11:58:12
20211228014915	2024-07-25 11:58:12
20220107221237	2024-07-25 11:58:12
20220228202821	2024-07-25 11:58:12
20220312004840	2024-07-25 11:58:12
20220603231003	2024-07-25 11:58:13
20220603232444	2024-07-25 11:58:13
20220615214548	2024-07-25 11:58:13
20220712093339	2024-07-25 11:58:13
20220908172859	2024-07-25 11:58:13
20220916233421	2024-07-25 11:58:13
20230119133233	2024-07-25 11:58:14
20230128025114	2024-07-25 11:58:14
20230128025212	2024-07-25 11:58:14
20230227211149	2024-07-25 11:58:14
20230228184745	2024-07-25 11:58:14
20230308225145	2024-07-25 11:58:14
20230328144023	2024-07-25 11:58:15
20231018144023	2024-07-25 11:58:15
20231204144023	2024-07-25 11:58:15
20231204144024	2024-07-25 11:58:15
20231204144025	2024-07-25 11:58:15
20240108234812	2024-07-25 11:58:15
20240109165339	2024-07-25 11:58:16
20240227174441	2024-07-25 11:58:16
20240311171622	2024-07-25 11:58:16
20240321100241	2024-07-25 11:58:16
20240401105812	2024-07-25 11:58:17
20240418121054	2024-07-25 11:58:17
20240523004032	2024-07-25 11:58:18
20240618124746	2024-07-25 11:58:18
20240801235015	2024-08-07 09:11:53
20240805133720	2024-08-07 09:11:53
20240827160934	2024-09-08 07:14:08
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2024-07-25 11:53:12.278792
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2024-07-25 11:53:12.344595
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2024-07-25 11:53:12.401225
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2024-07-25 11:53:12.477344
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2024-07-25 11:53:12.565987
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2024-07-25 11:53:12.579771
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2024-07-25 11:53:12.604044
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2024-07-25 11:53:12.660531
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2024-07-25 11:53:12.717324
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2024-07-25 11:53:12.772866
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2024-07-25 11:53:12.83054
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2024-07-25 11:53:12.897086
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2024-07-25 11:53:12.953141
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2024-07-25 11:53:13.013138
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2024-07-25 11:53:13.072825
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2024-07-25 11:53:13.165979
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2024-07-25 11:53:13.183955
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2024-07-25 11:53:13.346731
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2024-07-25 11:53:13.514225
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2024-07-25 11:53:13.583247
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2024-07-25 11:53:13.645308
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2024-07-25 11:53:13.711575
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2024-07-25 11:53:13.801141
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2024-07-25 11:53:13.835445
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2024-07-25 11:53:13.892795
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 209, true);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_realtime_admin
--

SELECT pg_catalog.setval('realtime.messages_id_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 5822, true);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: parking_lots parking_lots_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.parking_lots
    ADD CONSTRAINT parking_lots_pkey PRIMARY KEY (id);


--
-- Name: program_timeline program_timeline_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.program_timeline
    ADD CONSTRAINT program_timeline_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING hash (entity);


--
-- Name: messages_topic_index; Type: INDEX; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE INDEX messages_topic_index ON realtime.messages USING btree (topic);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: program_timeline All can select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "All can select" ON public.program_timeline FOR SELECT USING (true);


--
-- Name: parking_lots Delete: isAuthenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delete: isAuthenticated" ON public.parking_lots FOR DELETE TO authenticated USING (true);


--
-- Name: program_timeline Delete: isAuthenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delete: isAuthenticated" ON public.program_timeline FOR DELETE TO authenticated USING (true);


--
-- Name: parking_lots Insert: isAuthenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Insert: isAuthenticated" ON public.parking_lots FOR INSERT TO authenticated WITH CHECK (true);


--
-- Name: program_timeline Insert: isAuthenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Insert: isAuthenticated" ON public.program_timeline FOR INSERT TO authenticated WITH CHECK (true);


--
-- Name: parking_lots Select ALL; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Select ALL" ON public.parking_lots FOR SELECT USING (true);


--
-- Name: program_timeline Update: isAuthenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Update: isAuthenticated" ON public.program_timeline FOR UPDATE TO authenticated USING (true);


--
-- Name: parking_lots Updated: isAuthenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Updated: isAuthenticated" ON public.parking_lots FOR UPDATE TO authenticated USING (true);


--
-- Name: parking_lots; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.parking_lots ENABLE ROW LEVEL SECURITY;

--
-- Name: program_timeline; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.program_timeline ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: supabase_realtime parking_lots; Type: PUBLICATION TABLE; Schema: public; Owner: postgres
--

ALTER PUBLICATION supabase_realtime ADD TABLE ONLY public.parking_lots;


--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.try_cast_double(inp text) FROM postgres;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_decode(data text) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_encode(data bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION lo_export(oid, text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_export(oid, text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_export(oid, text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text, oid); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text, oid) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text, oid) TO supabase_admin;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION delete_claim(uid uuid, claim text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_claim(uid uuid, claim text) TO anon;
GRANT ALL ON FUNCTION public.delete_claim(uid uuid, claim text) TO authenticated;
GRANT ALL ON FUNCTION public.delete_claim(uid uuid, claim text) TO service_role;


--
-- Name: FUNCTION get_claim(uid uuid, claim text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_claim(uid uuid, claim text) TO anon;
GRANT ALL ON FUNCTION public.get_claim(uid uuid, claim text) TO authenticated;
GRANT ALL ON FUNCTION public.get_claim(uid uuid, claim text) TO service_role;


--
-- Name: FUNCTION get_claims(uid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_claims(uid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_claims(uid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_claims(uid uuid) TO service_role;


--
-- Name: FUNCTION get_my_claim(claim text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_my_claim(claim text) TO anon;
GRANT ALL ON FUNCTION public.get_my_claim(claim text) TO authenticated;
GRANT ALL ON FUNCTION public.get_my_claim(claim text) TO service_role;


--
-- Name: FUNCTION get_my_claims(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_my_claims() TO anon;
GRANT ALL ON FUNCTION public.get_my_claims() TO authenticated;
GRANT ALL ON FUNCTION public.get_my_claims() TO service_role;


--
-- Name: FUNCTION is_claims_admin(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.is_claims_admin() TO anon;
GRANT ALL ON FUNCTION public.is_claims_admin() TO authenticated;
GRANT ALL ON FUNCTION public.is_claims_admin() TO service_role;


--
-- Name: FUNCTION set_claim(uid uuid, claim text, value jsonb); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.set_claim(uid uuid, claim text, value jsonb) TO anon;
GRANT ALL ON FUNCTION public.set_claim(uid uuid, claim text, value jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.set_claim(uid uuid, claim text, value jsonb) TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE parking_lots; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.parking_lots TO anon;
GRANT ALL ON TABLE public.parking_lots TO authenticated;
GRANT ALL ON TABLE public.parking_lots TO service_role;


--
-- Name: TABLE program_timeline; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.program_timeline TO anon;
GRANT ALL ON TABLE public.program_timeline TO authenticated;
GRANT ALL ON TABLE public.program_timeline TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: SEQUENCE messages_id_seq; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON SEQUENCE realtime.messages_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.messages_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

